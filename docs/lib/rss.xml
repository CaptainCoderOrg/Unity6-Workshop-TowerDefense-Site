<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Tower Defense Course]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://towerdefense.captaincoder.org/</link><image><url>https://towerdefense.captaincoder.org/lib/media/favicon.png</url><title>Tower Defense Course</title><link>https://towerdefense.captaincoder.org/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 08 Mar 2025 11:53:55 GMT</lastBuildDate><atom:link href="https://towerdefense.captaincoder.org/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 08 Mar 2025 11:53:33 GMT</pubDate><copyright><![CDATA[Captain Coder]]></copyright><ttl>60</ttl><dc:creator>Captain Coder</dc:creator><item><title><![CDATA[Isometric Camera Challenge]]></title><description><![CDATA[ 
 <br>Before starting this challenge, you should complete <a data-href="05 - Creating an Isometric Camera" href="https://towerdefense.captaincoder.org/lessons/05-creating-an-isometric-camera.html" class="internal-link" target="_self" rel="noopener nofollow">05 - Creating an Isometric Camera</a>.<br>In this challenge you are tasked with setting up an Isometric Camera for a pre-existing scene.<br><br>
<br>Download the Isometric Camera Challenge: <a data-href="IsometricCameraChallenge v1.0.0.unitypackage" href="https://towerdefense.captaincoder.org/challenges/01-isometric-camera-challenge/isometriccamerachallenge-v1.0.0.unitypackage" class="internal-link" target="_self" rel="noopener nofollow">IsometricCameraChallenge v1.0.0.unitypackage</a>
<br>Import the package into your Unity Project
<br><img alt="import-challenge.webp" src="https://towerdefense.captaincoder.org/lib/media/import-challenge.webp"><br><br>
<br>Open the Isometric Camera Challenge Scene
<br>Configure the scene's Main Camera to be Isometric using a Rotation of (30, -45, 0)
<br>Modify the elements in the Hierarchy such that the elements are centered at the game world's origin (0, 0, 0)
<br><br>When you've completed this challenge, your Game View should look similar to the one below.<br><img alt="isometric-camera-challenge-solution.png" src="https://towerdefense.captaincoder.org/lib/media/isometric-camera-challenge-solution.png">]]></description><link>https://towerdefense.captaincoder.org/challenges/01-isometric-camera-challenge/isometric-camera-challenge.html</link><guid isPermaLink="false">Challenges/01 - Isometric Camera Challenge/Isometric Camera Challenge.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/import-challenge.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/import-challenge.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Binary Waypoint Challenge]]></title><description><![CDATA[ 
 <br>Before starting this challenge, you should complete <a data-href="07 - Waypoints" href="https://towerdefense.captaincoder.org/lessons/07-waypoints.html" class="internal-link" target="_self" rel="noopener nofollow">07 - Waypoints</a>.<br>In this challenge, you are tasked with creating a Binary Waypoint that can connected up to TWO other Binary Waypoints.<br><br>
<br>Download the Binary Waypoint Challenge: <a data-href="BinaryWaypointChallenge V1.0.0.unitypackage" href="https://towerdefense.captaincoder.org/challenges/02-binary-waypoint-challenge/binarywaypointchallenge-v1.0.0.unitypackage" class="internal-link" target="_self" rel="noopener nofollow">BinaryWaypointChallenge V1.0.0.unitypackage</a>
<br>Import the package into your Unity Project
<br><br>
<br>Open the Binary Waypoint Challenge
<br>Create a Binary Waypoint Prefab
<br>The Binary Waypoint Prefab should have 3D Cube
<br>Create a BinaryWaypoint MonoBehaviour Script

<br>Create a First Property that is a BinaryWaypoint
<br>Create a Second Property that is a BinaryWaypoint
<br>Both properties should be visible in the inspector


<br>Implement the OnDrawGizmos method

<br>Draw a red line from the waypoint to First
<br>Draw a yellow line from the waypoint to Second
<br>Add null checks such that 0, 1, or 2, waypoints can be specified


<br>Add Binary Waypoints to the scene to match the image below
<br><img alt="binary-waypoint-connections.png" src="https://towerdefense.captaincoder.org/lib/media/binary-waypoint-connections.png"><br>
<br>Ensure that the Binary Waypoints are not visible in the Game View
<br><img alt="no-waypoints-visible.png" src="https://towerdefense.captaincoder.org/lib/media/no-waypoints-visible.png">]]></description><link>https://towerdefense.captaincoder.org/challenges/02-binary-waypoint-challenge/binary-waypoint-challenge.html</link><guid isPermaLink="false">Challenges/02 - Binary Waypoint Challenge/Binary Waypoint Challenge.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/binary-waypoint-connections.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/binary-waypoint-connections.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[00 - Install Unity 6]]></title><description><![CDATA[ 
 <br>Before you can start this course, you will need to ensure you have the correct version of Unity installed. In this course, you will be using Unity 6 (version: 6000.0.XYZ), although many aspects of this project will likely work in later versions, no guarantees will be made by the author.<br><br>
<br>In Unity Hub select the Installs tab on the left side of the interface. Then select Install Editor.
<br><img alt="UnityHubInstalls.png" src="https://towerdefense.captaincoder.org/lib/media/unityhubinstalls.png"><br>
<br>
Under Official releases locate the Unity 6 section and select a version that starts with 6000.0. Note: Anything that comes after 6000.0. is called a patch number and for our purposes we want to ensure that it ends with the letter f<br>
<img alt="SelectUnity6000.0.png" src="https://towerdefense.captaincoder.org/lib/media/selectunity6000.0.png">

<br>
Before clicking finalizing the Install be sure you add the WebGL Build Support module on the next screen. You will need to scroll through the available modules to find it. You do not need any other modules for this project.<br>
<img alt="Unity6InstallWebGLBuildSupport.png" src="https://towerdefense.captaincoder.org/lib/media/unity6installwebglbuildsupport.png">

<br>If all went well, the Editor application and WebGL  Build Support module will download and install. Depending on your internet connection speed and your computer's processor speed, this can take anywhere from 5 minutes to 1 hour to complete (longer for slower internet connections).<br>
<img alt="Unity6DownloadInProgress.png" src="https://towerdefense.captaincoder.org/lib/media/unity6downloadinprogress.png"><br>
Note: After the download has finished, the installer will prompt you to finish the installation. You may need the password you use to log into your computer to finish this step. If you encounter any issues, do not hesitate to contact your instructor.<br>After the install is complete, you should see an Install complete message and a green check mark next to Editor application and WebGL Build Support. If you do not see this, contact your instructor for additional help.<br><img alt="Unity6DownloadComplete.png" src="https://towerdefense.captaincoder.org/lib/media/unity6downloadcomplete.png"><br><br>In the next section, you will create a new Unity 6 project<br><a data-href="01 - Creating the Project" href="https://towerdefense.captaincoder.org/lessons/01-creating-the-project.html" class="internal-link" target="_self" rel="noopener nofollow">01 - Creating the Project</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/00-install-unity-6.html</link><guid isPermaLink="false">Lessons/00 - Install Unity 6.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/unityhubinstalls.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/unityhubinstalls.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[01 - Creating the Project]]></title><description><![CDATA[ 
 <br><br>Before starting, you will need to create a new Unity 6 project. The picture below shows the settings you should select when creating the project.<br>
<br>Ensure the editor version begins with 6000.0.
<br>Ensure you are using the Universal 3D Core template 

<br>(DO NOT USE High Definition 3D you will not be able to publish your project if you choose this setting)


<br>Name your project (I recommend naming it Tower Defense)
<br>You do not need to connect to Unity Cloud or Unity Version Control you can unselect these options.<br>
<img alt="UnityHubProjectSettings.png" src="https://towerdefense.captaincoder.org/lib/media/unityhubprojectsettings.png">
<br>After selecting Create project you should see the Unity Engine window (similar to the one below). The first time you initialize a project, it may take several minutes depending on the speed of your computer.<br><img alt="UnityEngineInitializing.png" src="https://towerdefense.captaincoder.org/lib/media/unityengineinitializing.png"><br>If all went well, you should see the default Unity project displayed. It should be similar to the image below:<br><img alt="DefaultProjectInitialized.png" src="https://towerdefense.captaincoder.org/lib/media/defaultprojectinitialized.png"><br>If something doesn't look quite right, you may want to set the Layout to the default view. For the majority of this course, the screenshot will be using the default layout.<br>You can set the default layout from the top menu: Windows &gt; Layouts &gt; Default<br><img alt="UnitySetDefaultLayout.png" src="https://towerdefense.captaincoder.org/lib/media/unitysetdefaultlayout.png"><br><br>Before continuing, be sure to create a new Tower Defense Scene for your project. If you use the default Sample Scene there is a slight chance that it could be overwritten during an import of library / challenge project.<br>
<br>In the Project View, navigate to Assets &gt; Scenes
<br><img alt="open-scenes-folder.png" src="https://towerdefense.captaincoder.org/lib/media/open-scenes-folder.png"><br>
<br>Right click in the Project View 
<br>Select Create &gt; Scene &gt; Scene
<br><img alt="create-scene.png" src="https://towerdefense.captaincoder.org/lib/media/create-scene.png"><br>
<br>Rename your new Scene (I recommend "TowerDefenseScene")
<br><img alt="rename-scene.png" src="https://towerdefense.captaincoder.org/lib/media/rename-scene.png"><br>
<br>Double click to open your new Scene
<br>Delete the original SampleScene to prevent yourself from accidentally using it.
<br><img alt="delete-sample-scene.png" src="https://towerdefense.captaincoder.org/lib/media/delete-sample-scene.png"><br><br>With your Tower Defense Scene created, you're ready to design your map. In the next section, you create a Tile Grid that will be used to create your map<br><a data-href="02 - Creating a Tile Grid" href="https://towerdefense.captaincoder.org/lessons/02-creating-a-tile-grid.html" class="internal-link" target="_self" rel="noopener nofollow">02 - Creating a Tile Grid</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/01-creating-the-project.html</link><guid isPermaLink="false">Lessons/01 - Creating the Project.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/unityhubprojectsettings.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/unityhubprojectsettings.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[02 - Creating a Tile Grid]]></title><description><![CDATA[ 
 <br><br>The mini-lecture below provides a high level overview of what you'll learn in this section. Watch the video and take notes. Then, complete the lesson below to apply the concepts from the video. <br>Warning: It is not recommended to work along side the video as the content is not identical to the lesson.<br><br><br>
<br>Download Kenney's Tower Defense Kit: <a rel="noopener nofollow" class="external-link" href="https://kenney.nl/assets/tower-defense-kit" target="_blank">https://kenney.nl/assets/tower-defense-kit</a>
<br>Extract the archived zip file
<br><img alt="ExtractFile.png" src="https://towerdefense.captaincoder.org/lib/media/extractfile.png"><br>
<br>Within the extracted folder find the open the Models folder and open it<br>
<img alt="find-models.webp" src="https://towerdefense.captaincoder.org/lib/media/find-models.webp">
<br>Import the FBX format folder into your Assets folder<br>
<img alt="import-fbx-format.webp" src="https://towerdefense.captaincoder.org/lib/media/import-fbx-format.webp">
<br>Rename the folder. I recommend calling it Kenney Tower Defense Kit Models<br>
<img alt="rename-folder.webp" src="https://towerdefense.captaincoder.org/lib/media/rename-folder.webp">
<br><br>
<br>Navigate to the Tower Defense Kit Models in folder in Unity's Project explorer
<br>Note: You can adjust the size of the preview by using the slider in the bottom right corner of the Project Explorer tab.<br><img alt="resize-project-preview-size.webp" src="https://towerdefense.captaincoder.org/lib/media/resize-project-preview-size.webp"><br>
<br>Find the tile model and drag it into the scene
<br><img alt="add-tile-fbx-to-scene.webp" src="https://towerdefense.captaincoder.org/lib/media/add-tile-fbx-to-scene.webp"><br><br>Before you add any more tiles to the scene, you should parent the tile model and create a Prefab to represent your tile. This will be useful if you decide to change the tile later (and you will).<br>
<br>Right click on the tile object in the Hierarchy and select Create Empty Parent this will create a new Game Object with the tile as a child.
<br><img alt="create-parent.webp" src="https://towerdefense.captaincoder.org/lib/media/create-parent.webp"><br>
<br>Rename the parent object. I recommend calling it Tile
<br>Now that you have a Tile Game Object, that will be the basis of each cell of your map, it is time to turn it into a reusable Prefab. To create a Prefab from an existing object, drag that object from the Hierarchy into your Project tab.<br>
<br>Drag your Tile Game Object into your Assets folder.
<br><img alt="create-prefab.webp" src="https://towerdefense.captaincoder.org/lib/media/create-prefab.webp"><br>You'll notice that the Game Object in the Hierarchy is now appears in blue and has a small arrow &gt; on the right side of the Hierarchy. This tells you that this Game Object is using a Prefab.<br><img alt="notice-prefab.png" src="https://towerdefense.captaincoder.org/lib/media/notice-prefab.png"><br>Note: You should use a Prefab any time you plan to use the same Game Object in multiple places (e.g., enemies, structures, UI elements). Most projects have many Prefabs and as such, it typically makes sense to create a folder to hold them.<br>
<br>Create a Prefabs folder in your Assets folder
<br>Move the Tile Prefab into your Prefabs folder
<br><img alt="create-prefabs-folder.webp" src="https://towerdefense.captaincoder.org/lib/media/create-prefabs-folder.webp"><br><br>For this game, you will need to create a grid of Tile Game Objects that are aligned perfectly on the X, Y, and Z axis. This can be quite difficult and tedious to do even with just two Tiles! Try it.<br>
<br>Add a second Tile Prefab to your Hierarchy
<br>Try to align the new Tile perfectly on the X, Y, and Z axis with the existing tile so they are adjacent.
<br><img alt="try-to-align.webp" src="https://towerdefense.captaincoder.org/lib/media/try-to-align.webp"><br>You may have found it very difficult to perfectly align the two tiles, especially using the mouse! One option to align them perfectly is to use the inspector to se them to be exactly 1 unit apart (the tiles happen to be 1 Unity unit on the X and Z axis! LUCKY YOU!)<br>
<br>Use the Inspector to adjust the Tile positions to be perfectly spaced 1 unit apart on the X or Z axis
<br><img alt="perfect-alignment-with-inspector.webp" src="https://towerdefense.captaincoder.org/lib/media/perfect-alignment-with-inspector.webp"><br><br>Using the above process, can you create a perfectly aligned 3x3 grid of Tiles?<br>
<br>Create 9 Tile prefabs
<br>Move the Tiles into a parent object named Grid
<br>Perfectly align each Tile such that they form a 3x3 grid with no overlapping edges and no visible seams
<br>When you are finished, your Hierarchy and Scene view should look similar to the image below:<br><img alt="challenge1-solution.png" src="https://towerdefense.captaincoder.org/lib/media/challenge1-solution.png"><br><br>After completing the previous challenge, you might be realizing how difficult, tedious, and painful it is going to be to create a large grid for your game in this manner. When you find yourself performing a repetitive task, it is often beneficial to seek if an automated solution exists and if it does not exists, create one.<br>In this case, there exists a partially automated solution (later you will create a fully automated solution).<br><br>You will often want to place Game Objects at an evenly spaced distance. This can be quickly don by using Unity's Linear Spacing Syntax. This allows you to specify a starting position and an ending position for a set of objects and Unity will automagically space the objects between those positions.<br>
<br>Create 1 more Tile so you have a total of 10 tiles
<br>Select all 10 Tile objects in the inspector

<br>Note: You can select multiple objects by holding Shift while clicking. This will select all of the objects between the first object clicked and the last object clicked.
<br>Note: You can add or remove a single object to a selection by holding Ctrl/Command and clicking on the object


<br>Set all of the Tiles positions to 0, 0, 0 in the inspector.
<br>In the X Position editor, type L(0, 9)
<br><img alt="linear-on-10-objects.webp" src="https://towerdefense.captaincoder.org/lib/media/linear-on-10-objects.webp"><br>At this point, you should have 10 Tile objects spaced perfectly in a single row. Next, you need to create 10 rows that are evenly spaced.<br>
<br>Select your 10 Tiles and put them into an Empty Parent Object
<br>Rename the parent (I recommend calling it a row)
<br>Duplicate your row such that you have 10 rows

<br>Note: Ctrl+D/Command+D will duplicate the selected Game Object 


<br>Use Linear Spacing Syntax to place the rows evenly on the Z axis between 0 and 9
<br><img alt="linear-on-z-axis.webp" src="https://towerdefense.captaincoder.org/lib/media/linear-on-z-axis.webp"><br><br>Earlier in the lesson, you created a Tile Prefab. One of the major benefits of using a Prefab is the ability to change all Game Objects that use that Prefab throughout your project by modifying the original.<br>Double clicking on a Prefab asset in the Project explorer will open it in the Scene tab where it can be edited. You can exit the Prefab editor by clicking the &lt; near the top of the Hierarchy. <br><img alt="open-prefab-editor.webp" src="https://towerdefense.captaincoder.org/lib/media/open-prefab-editor.webp"><br>
<br>Open your Tile Prefab
<br>You may have noticed that the tile model you previously added to the Tile object is a prefab! Recall that you can easily identify prefab game objects by their blue color in the Inspector.<br>Some times, it is useful to unpack a prefab object to separate it from the parent Prefab. This can be done by right clicking on the Game Object in the Hierarchy and selecting Prefab &gt; Unpack. When you do this, it disconnects it from the prefab such that it won't update if the original prefab changes. Because some of your Tiles will use different models, you will want disconnect the tile Prefab to allow the model to be changed.<br>
<br>Completely Unpack the tile object
<br>Rename the tile object to be more generalized (I recommend model)
<br><img alt="unpack-tile-model.webp" src="https://towerdefense.captaincoder.org/lib/media/unpack-tile-model.webp"><br>With the child object renamed, you can verify that all of your Tile Prefabs have changed exiting the Prefab Scene and opening your Tile objects.<br>
<br>Verify that your Prefabs have updated
<br><img alt="verify-prefab-update.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-prefab-update.webp"><br>You will often want to make changes to a single instance of a Prefab. For example, you will want to change some of your tiles to use a different model. This can be done by editing the Game Object directly in the Scene view's Hierarchy / Inspector.<br>In this case, you want to adjust some of your Tiles to use a different mesh. This can be set on the model Game Object's Mesh Filter. In the Inspector you can click the small circle next to the Mesh field to see all mesh assets in your project that can be set.<br>
<br>Select a Tile in your Scene
<br>Select the model child Game Object
<br>Update the Mesh of the model Game Object to be tile-dirt
<br><img alt="set-tile-dirt-model.webp" src="https://towerdefense.captaincoder.org/lib/media/set-tile-dirt-model.webp"><br>By clicking the &gt; button to the right of a Prefab in the Hierarchy, you can edit a Prefab in the Scene view. When you do this, all elements in the Scene view that are not apart of the selected object will be shown in grey scale indicating that you cannot interact with them in the Hierarchy.<br>
<br>Select a Tile in the Inspector
<br>Click the &gt; button to enter the Prefab editor within the Scene
<br><img alt="enter-prefab-scene-editor.webp" src="https://towerdefense.captaincoder.org/lib/media/enter-prefab-scene-editor.webp"><br>While editing the Tile Prefab while in the Scene view, you can observe the changes live.<br>
<br>Change the Tile Prefab's the Mesh property to be snow-tile
<br>Exit the Prefab editor
<br><img alt="change-to-snow-tile.webp" src="https://towerdefense.captaincoder.org/lib/media/change-to-snow-tile.webp"><br>One thing to note is that the Prefab that you previously modified in the Hierarchy did not change. This is because the Mesh property has been overridden. You can see all Overrides for a Game Object in the Inspector by selecting the Overrides drop down. Additionally, if you can Revert those changes to the Prefab's current setting or Apply those changes to the Prefab to propagate the change throughout your project.<br>
<br>Select the Tile that is different
<br>In the Inspector find the Overrides drop down
<br>Select Apply All to change all of the Tile Prefabs to use the dirt mesh
<br><img alt="apply-overrides-inspector.webp" src="https://towerdefense.captaincoder.org/lib/media/apply-overrides-inspector.webp"><br><br>Practice editing prefabs by setting the Tile Prefab to use a different mesh using each of the methods described above<br>
<br>Edit the Prefab directly
<br>Edit a Tile using the Scene prefab editor
<br>Modify a Tile then Apply the Override to all prefabs
<br>Before continuing, update your Tile Prefab to use the tile mesh. This particular Prefab will be used as an empty tile where the player can build a structure.<br><br>In the next section, you will create several more Prefabs that you will use to build a more detailed map<br><a data-href="03 - Creating Additional Tile Prefabs" href="https://towerdefense.captaincoder.org/lessons/03-creating-additional-tile-prefabs.html" class="internal-link" target="_self" rel="noopener nofollow">03 - Creating Additional Tile Prefabs</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/02-creating-a-tile-grid.html</link><guid isPermaLink="false">Lessons/02 - Creating a Tile Grid.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/extractfile.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/extractfile.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[03 - Creating Additional Tile Prefabs]]></title><description><![CDATA[ 
 <br>Before you can design your first level, you will need to create a few more Prefabs that will be used on your Grid in place of the empty Tile.<br><br>The mini-lecture below provides a high level overview of what you'll learn in this section. Watch the video and take notes. Then, complete the lesson below to apply the concepts from the video. <br>Warning: It is not recommended to work along side the video as the content is not identical to the lesson.<br><br><br>Start by changing the Mesh of a Tile in your scene to use the tile-dirt mesh.<br>
<br>Select a Tile in your Scene
<br>Change the Mesh property of the selected tile to tile-dirt
<br><img alt="set-tile-dirt-model.webp" src="https://towerdefense.captaincoder.org/lib/media/set-tile-dirt-model.webp"><br>This Game Object will be the basis for a **Path Tile Prefab.<br>
<br>Select the modified Tile in the Inspector
<br>Unpack Completely so it is no longer attached to the Tile Prefab
<br>Rename the Game Object. (I recommend calling it Path Tile)
<br><img alt="unpack-path-tile.webp" src="https://towerdefense.captaincoder.org/lib/media/unpack-path-tile.webp"><br>
<br>Drag the Path Tile into your Prefabs folder to change it to a new Prefab
<br><img alt="create-path-tile-prefab.webp" src="https://towerdefense.captaincoder.org/lib/media/create-path-tile-prefab.webp"><br><br>Practice unpacking and creating a few more prefabs<br>
<br>Create a Tree Tile using the tile-tree mesh
<br>Create a Rock Tile using the tile-rock mesh
<br>Create a Crystal Tile using the tile-crystal mesh
<br>When you have finished, you should have 5 Tile Prefabs that look similar to the ones picture in the image below.<br><img alt="create-tiles-challenge.png" src="https://towerdefense.captaincoder.org/lib/media/create-tiles-challenge.png"><br><br>It is possible to swap out a Prefab for another quickly in the Hierarchy by right clicking on Prefab and selecting Prefab &gt; Replace.<br>
<br>Select a Tile you would like to change to a Path Tile
<br>Right click on it in the Inspector
<br>Select Prefab &gt; Replace
<br>Search for and select the Path Tile prefab
<br><img alt="replace-prefab.webp" src="https://towerdefense.captaincoder.org/lib/media/replace-prefab.webp"><br>You can also replace a Prefab from the Inspector.<br>
<br>Select a Tile you would like to be a path
<br>In the Inspector click the circle next to the Prefab value
<br>Search for and select the Path Tile Prefab
<br><img alt="replace-prefab-inspector.webp" src="https://towerdefense.captaincoder.org/lib/media/replace-prefab-inspector.webp"><br>Changing a Prefab from the Inspector is particularly useful if you would like to change several Game Objects at the same time.<br>
<br>Select several Tiles that you would like to be a path

<br>Hold Ctrl/Command while clicking in the Scene to add or remove a game object to your selection.


<br>In the Inspector click the circle next to the Multiple value

<br>Note: The Prefab word changes to Multiple if you have several objects selected


<br>Search for and select the Path Tile Prefab
<br><img alt="replace-multiple-prefabs.webp" src="https://towerdefense.captaincoder.org/lib/media/replace-multiple-prefabs.webp"><br><br>With everything you've learned so far, it is now time to design a map for your first level! <br>
<br>Your tile grid should be 15x15

<br>Note: Odd length sides will result in a "center" tile


<br>Your level should use at least 5 different types of tiles
<br>Your level should have one continuous path from the edge of the map to an "end" location, eventually your Player's tower will be placed here. 
<br>Bonus: Share a screenshot of your Map with a friend!
<br>When you're finished, your map might look something like the image below:<br><img alt="Example Finished Map.png" src="https://towerdefense.captaincoder.org/lib/media/example-finished-map.png"><br><br>With a tile grid designed for your game, you are ready to set up the player's view. In the next section, you will configure your editor's Play Mode to optimize your design experience.<br><a data-href="04 - Play Mode Settings" href="https://towerdefense.captaincoder.org/lessons/04-play-mode-settings.html" class="internal-link" target="_self" rel="noopener nofollow">04 - Play Mode Settings</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/03-creating-additional-tile-prefabs.html</link><guid isPermaLink="false">Lessons/03 - Creating Additional Tile Prefabs.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/set-tile-dirt-model.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/set-tile-dirt-model.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[04 - Play Mode Settings]]></title><description><![CDATA[ 
 <br><br>Thus far, you have only worked within the Scene view without testing how your game will appear to a player. To enter Play Mode to see what the player's experience will be, click the Play button at the top center of the Unity Editor window.<br><img alt="enter-playmode-button.png" src="https://towerdefense.captaincoder.org/lib/media/enter-playmode-button.png"><br>Upon entering Play Mode you'll notice a few things. First, you likely will see a loading window that will appear for a few seconds (in some cases more minutes!). Then, the editor will automatically switch the the Game view. You can tell when you're in Play Mode when the play button switches to a "stop" button and is highlighted. Additionally, the editor changes to a slightly darker tint.<br>You can see each of these changes in the video below:<br><img alt="entering-playmode.webp" src="https://towerdefense.captaincoder.org/lib/media/entering-playmode.webp"><br><br>A common beginner mistake happens when you modify your scene while you're unintentionally in Play Mode. This can result in lost work. The moment you exit Play Mode all changes revert back to the state they were in prior to entering Play Mode<br>You can test this by moving your camera while you're in Play Mode then exiting Play Mode<br>
<br>Enter Play Mode
<br>While in Play Mode select your Main Camera
<br>Move the Main Camera's Y position in the Inspector
<br>Tilt the Main Camera down by adjusting the X rotation in the Inspector
<br>Exit Play Mode
<br>You'll notice as soon as you exit Play Mode the camera's Transform is restored to it's original values. <br><img alt="editing-in-playmode.webp" src="https://towerdefense.captaincoder.org/lib/media/editing-in-playmode.webp"><br>To help prevent accidentally editing your project in Play Mode, you can change the Play Mode Tint to a more obvious color.<br><br>
<br>First, enter Play Mode
<br>From the top menu, select Edit &gt; Preferences (on Mac it is Unity &gt; Preferences)
<br><img alt="preferences.png" src="https://towerdefense.captaincoder.org/lib/media/preferences.png"><br>
<br>In the Preferences window, use the search bar to search for playmode tint
<br><img alt="playmode-tint.png" src="https://towerdefense.captaincoder.org/lib/media/playmode-tint.png"><br>
<br>Click the color bar adjacent to the Playmode tint option on the Colors tab 
<br>Adjust the color setting. (I personally use yellow)

<br>Note: If you're in Play Mode you can preview what the change will look like


<br><img alt="changing-playmode-color.webp" src="https://towerdefense.captaincoder.org/lib/media/changing-playmode-color.webp"><br><br>Now that you can more easily tell when you are in Play Mode you may also want to update your Play Mode setting so you can enter Play Mode more quickly. Recall, when you enter Play Mode you receive a small loading window which says it is "Reloading Domain":<br><img alt="reloading-domain.png" src="https://towerdefense.captaincoder.org/lib/media/reloading-domain.png"><br>By default, both the Scene and Domain are reloaded every time you enter Play Mode. There are good reasons to do this, especially for users who are new to Unity. The manual states, "By default Unity reloads the domain on entering Play mode to reset the application state. Resetting state before entering Play mode is often desirable so your application starts up as it would at the beginning of a new build." <br>However, it does slow down your iteration speed. Because of this, the Unity Editor provides the option to disable it so long as you invest the effort to implement checks in your code that reset values properly when entering Play Mode. You can read more about Domain Reloading in the manual here: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/Manual/domain-reloading.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/Manual/domain-reloading.html" target="_blank">Unity - Manual: Enter Play mode with domain reload disabled</a><br><br>
<br>From the top menu, select Edit &gt; Project Settings

<br>Note: this is not the same as Preferences 


<br><img alt="project-settings.png" src="https://towerdefense.captaincoder.org/lib/media/project-settings.png"><br>
<br>Select Editor from the left menu
<br>Scroll to the bottom of the Editor settings
<br>Find When entering Play Mode
<br>Change the drop down to Do not reload Domain or Scene
<br><img alt="editor-playmode-settings.png" src="https://towerdefense.captaincoder.org/lib/media/editor-playmode-settings.png"><br>
<br>Close the Project Settings window
<br>Enter Play Mode
<br>You should notice entering Play Mode is now almost instantaneous.<br><img alt="instant-playmod.webp" src="https://towerdefense.captaincoder.org/lib/media/instant-playmod.webp"><br><br>Now that you have configured Play Mode to work better for you, it is time to set up the game's isometric camera.<br><a data-href="05 - Creating an Isometric Camera" href="https://towerdefense.captaincoder.org/lessons/05-creating-an-isometric-camera.html" class="internal-link" target="_self" rel="noopener nofollow">05 - Creating an Isometric Camera</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/04-play-mode-settings.html</link><guid isPermaLink="false">Lessons/04 - Play Mode Settings.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:42 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/enter-playmode-button.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/enter-playmode-button.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[05 - Creating an Isometric Camera]]></title><description><![CDATA[ 
 <br>In this section, you will learn how to configure your Main Camera to render your game Isometrically.<br><br>An isometric camera shows a scene from a tilted angle, so you can see multiple sides of objects at the same time, like the top and two sides of a building. Unlike a regular camera, it doesn’t make things in the distance look smaller, which keeps everything the same size and gives a clean, organized look. It’s often used in games and art to create a clear and detailed view of the world.<br>By default, the Scene view is set to use an Perspective camera. This makes things that are further away appear smaller and things that are closer larger. In the top right corner of the Scene view, there is an Orientation Gizmo that allows you to switch to an Isometric view by clicking on the text  "Persp". To return to a Perspective view, you can click the text "Iso".<br><img alt="iso-camera-scene-view.webp" src="https://towerdefense.captaincoder.org/lib/media/iso-camera-scene-view.webp"><br>
<br>Find the Orientation Gizmo in the Scene view
<br>Change to Isometric view
<br>Change back to Perspective view
<br>You may find it difficult to move the camera in Isometric view. To help navigate, you can double click on game objects in the Hierarchy to move the camera to that position. Then, rotate the Scene view camera by holding the right mouse button and dragging it.<br>
<br>Switch to Isometric view
<br>Double click your Grid in the Hierarchy

<br>This will center the camera on the object


<br>Hold down the right mouse button and drag in the Scene view to adjust the camera to a slight angle

<br>On a track pad, Right click is often implemented with a two finger touch
<br>On mac, you can hold the Option key while dragging to emulate a right click


<br>Use the View Tool to adjust the camera view port
<br>Again, Double click your Grid in the Hierarchy

<br>This time, it will zoom in on that game object


<br>Zoom out by scrolling with the mouse wheel (or track pad)
<br><img alt="moving-iso-camera.webp" src="https://towerdefense.captaincoder.org/lib/media/moving-iso-camera.webp"><br>It will take some practice but, as you continue to use the editor you will become more comfortable with the camera movement.<br>Another setting that is useful to be aware of is the Handle Position Pivot Toggle. This is located in the top left of the Scene View. <br><img alt="pivot-setting.png" src="https://towerdefense.captaincoder.org/lib/media/pivot-setting.png"><br>By default, this is set to Pivot but it is often useful to set it to Center. This adjusts the "pivot" point when interacting with an object. This can be useful when you want to move an object by its center point (or find an object's center point).<br><img alt="pivot-setting.webp" src="https://towerdefense.captaincoder.org/lib/media/pivot-setting.webp"><br><br>Next, you will set up your game's Main Camera to render in an Isometric view.<br>To help configure the Main Camera's view, you can enable a Camera preview in the Scene view. You can find the Cameras toggle on menu that is docked in the bottom left of the Scene View.<br>
<br>Locate the Cameras toggle and enable it
<br><img alt="camera-preview-setting.png" src="https://towerdefense.captaincoder.org/lib/media/camera-preview-setting.png"><br>If all went well, you should now see a Cameras window that shows the Main Camera's current view (by default, this appears in the bottom right of the Scene view).<br><img alt="camera-preview-setting-2.png" src="https://towerdefense.captaincoder.org/lib/media/camera-preview-setting-2.png"><br>Currently, your main camera is likely aimed directly across your map (or your map may not be visible at all). To help with this, you will center your grid in your game world.<br>
<br>Set your Tile Grid's Transform Position to (0, 0, 0)
<br><img alt="center-grid.webp" src="https://towerdefense.captaincoder.org/lib/media/center-grid.webp"><br>Next, adjust your Camera to be centered in your game world slightly above your Grid.<br>
<br>Set your Main Camera's Transform Position to (0, 1, 0)
<br><img alt="center-camera.webp" src="https://towerdefense.captaincoder.org/lib/media/center-camera.webp"><br>You may have noticed a few things that feel a bit off:<br>
<br>The camera is showing in a Perspective View rather than an Isometric view
<br>The camera is positioned above the corner of your map rather than the center
<br><br>To achieve an Isometric feel within a 3D game, you can set the Projection mode of your camera to Orthographic.<br>
<br>Select your Main Camera in the Hierarchy 
<br>In the Inspector find the Camera Component
<br>Within the Camera Component expand the Projection settings
<br>Set the Perspective to Orthographic
<br><img alt="camera-orthographic-projection.webp" src="https://towerdefense.captaincoder.org/lib/media/camera-orthographic-projection.webp"><br>You'll notice after you change to an Orthographic projection, that the camera preview in the Scene view changes from a pyramid shape to a rectangular view port. You can adjust the size of the rectangle by changing the Size property in the Projection settings.<br>
<br>Set the Size of the Orthographic Projection to 8
<br><img alt="orthographic-size.webp" src="https://towerdefense.captaincoder.org/lib/media/orthographic-size.webp"><br>This property represents the height of the view port for this camera's projection. More specifically, how many units from the center of the rectangle to the top and bottom edge. That is to say, with a size of 8, the view port has a height of 16. This size will allow your 15x15 tile grid to fit centered on the screen.<br>To achieve 2.5D isometric feel, you can adjust the camera's position to center on the grid and rotation of your camera to be at an angle<br>
<br>Set your Main Camera's Transform Position to (0, 0, 0)
<br>Set your Main Camera's Transform Rotation to (22.5, 45, 0)

<br>Other good options are (30, 45, 0) and (37.5, 45, 0)


<br><img alt="rotate-camera.webp" src="https://towerdefense.captaincoder.org/lib/media/rotate-camera.webp"><br>It is hard to see in the Main Camera preview, but the camera is still centered on the corner of your map that is positioned at (0, 0, 0). Additionally, a small portion of that corner is now missing in the camera view!<br>If you switch to the Game view, it is much more obvious<br>
<br>Switch to the Game View tab
<br><img alt="missing-corner.png" src="https://towerdefense.captaincoder.org/lib/media/missing-corner.png"><br><br>Currently, your Grid's Transform is set to (0, 0, 0). However, if you set the Handle Position Toggle to the Pivot, you will notice that the Tile objects within are positioned from (0 to 14) in both the X and Z directions. This is useful for quickly identifying their location within the Grid.<br>At this point, it would be difficult to reposition all of the children objects directly. However, you can create a new "Position Pivot" object that will help you reposition all of the tiles.<br>
<br>Create a new Game Object that is a child of the Grid
<br>Name the new Game Object "Position Pivot"
<br><img alt="position-pivot.png" src="https://towerdefense.captaincoder.org/lib/media/position-pivot.png"><br>Next, move the "Position Pivot" so it is in the center of the Grid. Because you know the grid is 15x15, you can set the X position to 15/2 and the Z position to 15/2.<br>
<br>Set the Position Pivot Transform Position to (15/2, 0, 15/2)

<br>You'll notice that the math expression is evaluated resulting in the position (7.5, 0, 7.5)


<br><img alt="set-position-pivot.webp" src="https://towerdefense.captaincoder.org/lib/media/set-position-pivot.webp"><br>By reparenting all of the tiles within the "Position Pivot", their positions will now be relative to the "Position Pivot" which is centered. This allows you to move them relative to their center.<br>
<br>Move all of the rows to be children of the "Position Pivot"
<br>Set the Position Pivot's Transform Position to (0.5, 0, 0.5)

<br>This will move the center tile to the middle of your world. The 0.5 accounts for the size of the tile being 1 unit in size on both the X and Z axis.


<br><img alt="center-all-tiles-with-pivot.webp" src="https://towerdefense.captaincoder.org/lib/media/center-all-tiles-with-pivot.webp"><br>You can verify that the tiles are now centered within the Grid by switching the Tool Handle Position to Pivot and double clicking the Grid. The camera will move to the center of your map.<br><br>Now that you have centered your grid in your world view, it may be more obvious why only part of your tile grid is being displayed in the Main Camera. In this case, you can only see the top half of the grid!<br>If you select the Main Camera in the Scene View, you'll see the issue more clearly.<br>
<br>Select the Main Camera in the Hierarchy while in the Scene View
<br>Notice, the rectangle view port of the camera preview is bisecting your grid. This is related to centering the camera directly on your tile grid. By default, an Orthographic Projection will only display elements in front of it. This is called the Near Clipping Plane. You can adjust this setting to change the size of the Clipping Plane to start behind the camera in the Projection settings.<br>
<br>In the inspector, find the Clipping Planes setting in the Projection settings of your Camera
<br>Set the Near Clipping Plane to -50
<br>Set the Far Clipping Plane to 50
<br><img alt="adjust-clipping-plane.webp" src="https://towerdefense.captaincoder.org/lib/media/adjust-clipping-plane.webp"><br>The Clipping Plane is used to specify how far in the game world this camera searches for game objects to be rendered. When the Near Clipping Plane was set to 3, the camera was not rendering anything that was behind the position of the camera.<br><br>You may have noticed that within the Game View your game looks pixelated. This is likely caused by the Game View scaling to 1.3x (or higher). You may have also noticed that you cannot adjust the scale below 1.3x! This is due to a setting that is enabled for "Low Resolution Aspect Ratios". You can disable this setting in the Aspect drop down of the Game View.<br>
<br>Switch to the Game View tab
<br>Select the Aspect drop down (by default this says Free Aspect)
<br>Disable the "Low Resolution Aspect Ratios" setting
<br><img alt="disable-low-aspect-ratios.webp" src="https://towerdefense.captaincoder.org/lib/media/disable-low-aspect-ratios.webp"><br>You should now be able to set the Scale to 1x.<br><br>Aspect ratio refers to the proportional relationship between the width and height of a display or image, expressed as a ratio like 16:9 or 4:3. In Unity, aspect ratio is important because it determines how your game looks on different devices, ensuring that graphics and UI elements aren't stretched or cropped.<br>By default, Unity starts in Free Aspect this means your camera's resolution is the size of your Game View tab's view. You can also enforce an Aspect Ratio or specific resolution by changing the Aspect in the Game View.<br>
<br>Select the Game View tab
<br>Set the Aspect to "Full HD (1920x1080)"
<br>Resize the Game View tab
<br><img alt="set-hd-resolution.webp" src="https://towerdefense.captaincoder.org/lib/media/set-hd-resolution.webp"><br>
You'll now notice that the elements within the Game View will begin to scale with the size of the view port. This is because the game camera will now force the specified resolution / aspect ratio.<br>The majority of desktop and TV screens use a 16:9 aspect ratio. If you are developing for mobile devices, you will need to take more care to ensure the game functions properly for more aspect ratios. For this project, we will use a 16:9 ratio.<br>
<br>Set the Aspect to 16:9
<br><br>Whew! That was a lot of work. The best way to learn and retain something is to practice it. Before continuing to the next lesson, why not see if you can set up an Isometric Camera again in the <a data-href="Isometric Camera Challenge" href="https://towerdefense.captaincoder.org/challenges/01-isometric-camera-challenge/isometric-camera-challenge.html" class="internal-link" target="_self" rel="noopener nofollow">Isometric Camera Challenge</a>?<br>If you get stuck or need help, you can refer back to this lesson. Best of luck!<br><br>With your Game Camera set up, you are ready it is time to create your game's mechanics. In the next lesson, you will learn how to create a simple enemy that moves within your world.<br><a data-href="06 - Adding an Enemy" href="https://towerdefense.captaincoder.org/lessons/06-adding-an-enemy.html" class="internal-link" target="_self" rel="noopener nofollow">06 - Adding an Enemy</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/05-creating-an-isometric-camera.html</link><guid isPermaLink="false">Lessons/05 - Creating an Isometric Camera.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/iso-camera-scene-view.webp" length="0" type="image/webp"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/iso-camera-scene-view.webp"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[06 - Adding an Enemy]]></title><description><![CDATA[ 
 <br>In this section, you will create a simple enemy that can move around the map.<br><br>Kenney provides hundreds of free assets to the public domain that can be used to help in your prototypes (and even commercial projects). In this section, you will use the Graveyard Kit to create an enemy using one of the 5 provided models and animations.<br>Before starting, you should import the FBX Models from this asset pack: <a data-tooltip-position="top" aria-label="https://kenney.nl/assets/graveyard-kit" rel="noopener nofollow" class="external-link" href="https://kenney.nl/assets/graveyard-kit" target="_blank">Graveyard Kit · Kenney</a><br>If you need help importing the models, you can refer to the Importing Asset section of <a data-href="02 - Creating a Tile Grid#Importing Assets" href="https://towerdefense.captaincoder.org/lessons/02-creating-a-tile-grid.html#Importing_Assets" class="internal-link" target="_self" rel="noopener nofollow">02 - Creating a Tile Grid &gt; Importing Assets</a><br>Here is a quick check list to help you:<br>
<br>Download the Asset Pack
<br>Extract the ZIP archive
<br>Find the FBX Model folder
<br>Import the FBX Models into your Assets
<br>Rename the folder (I recommend Kenny Graveyard Kit)
<br><br>Start by creating an Empty Game Object in your Hierarchy that will act as the base for your Enemy.<br>
<br>Right click in the Hierarchy
<br>Select Create Empty
<br>Rename the Game Object. (I recommend calling it Enemy)
<br><img alt="create-empty.png" src="https://towerdefense.captaincoder.org/lib/media/create-empty.png"><br>Note: Double check that the new Game Object is not a child of any other object.<br><img alt="ensure-top-level-enemy.png" src="https://towerdefense.captaincoder.org/lib/media/ensure-top-level-enemy.png"><br>In the Kenney Graveyard Kit you will find 5 character models that can be used as a model for your Enemy:<br>
<br>character-digger
<br>character-ghost
<br>character-skeleton
<br>character-vampire
<br>character-zombie
<br>In the Project tab, if you search for character-, you should see the 5 models:<br>You can search your assets for a specific file by using the search bar at the top of the Project explorer tab.<br><img alt="kenney-character-models.png" src="https://towerdefense.captaincoder.org/lib/media/kenney-character-models.png"><br>
<br>Drag one of the character models onto your Enemy game object to make it a child object.

<br>Note: For this part of the project, I will be using the character-zombie model. However, feel free to use any of the models.


<br><img alt="add-model-to-enemy.webp" src="https://towerdefense.captaincoder.org/lib/media/add-model-to-enemy.webp"><br><br>Can you remember how to unpack a prefab? Notice, the character-xyz model you have selected is a Prefab in the Hierarchy. Can you unpack it?<br>
<br>Unpack the enemy-ufo- model in your Hierarchy
<br>Rename the game object to be model
<br>When you have finished, your Hierarchy should look similar to the image below:<br><img alt="practice-renaming-unpacking.png" src="https://towerdefense.captaincoder.org/lib/media/practice-renaming-unpacking.png"><br><br>Now that you have an Enemy game object, turn it into a Prefab. At this point, you now have multiple types of Prefabs (tiles and enemies). Create a folder for each within your Prefabs folder to help organize them.<br>
<br>Create a folder for your Enemy prefabs
<br>Create a folder for your Tile prefabs
<br>Move all of your prefabs to the appropriate folder
<br>When you have finished, your Prefabs folder should look similar to the folders below:<br><img alt="create-prefabs-folders.webp" src="https://towerdefense.captaincoder.org/lib/media/create-prefabs-folders.webp"><br><br>To make your Enemy move, you will need to create a MonoBehaviour. A MonoBehaviour is a scripted component that provides methods for managing the behaviour of your Game Objects while the game is running.<br>Create a MonoBehaviour script for your enemies movement called EnemyMovement<br>
<br>In the Project tab, create a Folder called Scripts
<br><img alt="create-scripts-folder.webp" src="https://towerdefense.captaincoder.org/lib/media/create-scripts-folder.webp"><br>
<br>Right click inside the Scripts folder
<br>Select Create &gt; Scripting &gt; MonoBehaviour Script
<br><img alt="create-mono-behaviour-script.png" src="https://towerdefense.captaincoder.org/lib/media/create-mono-behaviour-script.png"><br>
<br>Name the script EnemyMovement

<br>Note: You should not use spaces and you should use CameCasing when naming Scripts


<br>Double click to open the EnemyMovement script
<br>After the script loads, verify that the class name is EnemyMovement. If you did not rename the script immediately upon creation in Unity, the template will set the name to be NewMonoBehaviourScript. It is important to rename this when you open the file for the first time.<br><img alt="common-mistake.png" src="https://towerdefense.captaincoder.org/lib/media/common-mistake.png"><br>When named correctly, it should match the name of the file. For example, in VS Code:<br><img alt="verify-name.png" src="https://towerdefense.captaincoder.org/lib/media/verify-name.png"><br><br>Now that you have a EnemyMovement script, you can attach it to your Enemy Game Object<br>
<br>Select your Enemy from the Hierarchy
<br>In the Inspector select Add Component
<br>Search for EnemyMovement and Select it
<br>If all went well, you should now see an Enemy Movement component in the Inspector<br><img alt="add-enemy-movement.webp" src="https://towerdefense.captaincoder.org/lib/media/add-enemy-movement.webp"><br>You may have noticed that the Enemy Movement component in your inspector has a small green plus icon next to it. This means that the component you added only exists on this instance of your Enemy and not your Enemy Prefab.<br><img alt="enemy-movement-prefab-overrid.png" src="https://towerdefense.captaincoder.org/lib/media/enemy-movement-prefab-overrid.png"><br><br>Can you remember how to apply Overrides to your Prefab?<br>
<br>Apply the override to your Enemy Prefab to make the Enemy Movement script part of the Prefab
<br>When you are done, the green plus icon should no longer be visible on the Enemy Movement component in the inspector.<br><img alt="enemy-movement-override-applied.png" src="https://towerdefense.captaincoder.org/lib/media/enemy-movement-override-applied.png"><br><br>One of the most useful methods that are provided by a MonoBehaviour is the Update method. This method is called by the Unity Engine each frame your game is running. This can be used to update the Transform Position of a GameObject each frame to make it move in the game world.<br>Change your EnemyMovement script's Update method to increase the enemy's transform.position on the X axis each frame.<br><img alt="increment-transform-enemy-movement.png" src="https://towerdefense.captaincoder.org/lib/media/increment-transform-enemy-movement.png"><br>Be sure to save your work. Then, return to the Unity Editor and enter Play Mode. If all went well, you should see your Enemy moving along the x-axis of your game world. You can verify this in the Inspector.<br>
<br>Enter Play Mode
<br>Verify your Enemy Movement script is updating the Transform's Position in the Inspector
<br><img alt="playmode-move-enemy.webp" src="https://towerdefense.captaincoder.org/lib/media/playmode-move-enemy.webp"><br><br>You may have noticed the Enemy is not moving at a consistent rate. This is because, the Enemy Movement scripts Update method is being called each frame. This makes the movement of the Enemy dependent on the Frame Rate of the game.<br>To help with this, you can scale the movement using the amount of time that has passed between frames. In Unity, this value can be accessed using the Time.deltaTime property.<br>
<br>Update your movement to be scaled with Time.deltaTime
<br><img alt="scale-movement-with-delta-time.png" src="https://towerdefense.captaincoder.org/lib/media/scale-movement-with-delta-time.png"><br>
Once again, enter Play Mode and verify your Enemy's Transform Position is updating. You will notice your Enemy moves much slower than it did before. This is because it is now moving at 0.1 units per second. You can think of the expression * Time.deltaTime as "per second". For example, if you want an object to move 5 units per second, you would use 5 * Time.deltaTime.<br><img alt="playmode-move-enemy-deltaTime.webp" src="https://towerdefense.captaincoder.org/lib/media/playmode-move-enemy-deltatime.webp"><br><br>Different Enemies will move at different speeds. To help accommodate this, add a Speed property to your EnemyMovement script. <br>
<br>Add a float Speed property to your EnemyMovement class

<br>Following "good" programming practices, create a public getter and a private setter


<br>Set the default value of Speed to 1f
<br><img alt="add-speed-to-enemy-movement.png" src="https://towerdefense.captaincoder.org/lib/media/add-speed-to-enemy-movement.png"><br>
<br>In your Update method, use the Speed property rather than the float literal 0.1.
<br><img alt="update-method-with-speed-property.png" src="https://towerdefense.captaincoder.org/lib/media/update-method-with-speed-property.png"><br>
Once again, enter Play Mode and verify that your Enemy moves at 1 unity per second.<br><img alt="playmode-move-at-1unit-per-second.webp" src="https://towerdefense.captaincoder.org/lib/media/playmode-move-at-1unit-per-second.webp"><br><br>It is useful to be able to modify a property from the Unity Inspector. To do this, you must Serialize your property by adding the [field: SerializeField] attribute to the property that you would like to see in the inspector. <br>
<br>Add the [field: SerializeField] to your Speed property
<br><img alt="serialize-speed-property.png" src="https://towerdefense.captaincoder.org/lib/media/serialize-speed-property.png"><br>Now, when you select your Enemy, you will see the Speed property in the Enemy Movement component in the Inspector. You can adjust this value directly in the Inspector to change the speed of your Enemy. You can even do this while in Play Mode! However, be aware that when you exit Play Mode any changes you made will be reset to their original values.<br>
<br>Modify the Enemy's Speed directly in the inspector setting it to 2
<br>Enter Play Mode
<br>While in Play Mode, adjust the Speed
<br>Exit Play Mode
<br>Notice, that the Speed resets to the original value: 2
<br><img alt="adjusting-speed-in-inspector.webp" src="https://towerdefense.captaincoder.org/lib/media/adjusting-speed-in-inspector.webp"><br><br>Using what you've learned in this lesson, create a new MonoBehaviour Script called "EnemyRotation" that allows you to specify how quickly an Enemy rotates on the Y axis.<br>
<br>Read the Friendly Manul: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.Rotate.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.Rotate.html" target="_blank">Unity - Scripting API: Transform.Rotate</a>

<br>This method allows you to rotate a Game Object


<br>Create a EnemyRotation script
<br>In Update, rotate the enemy on the Y-axis
<br>Add a RotationSpeed property to the script

<br>Initialize the default value to 90f (e.g. 90 degrees per second)


<br>The script should serialize a RotationSpeed property so the value can be modified in the Inspector

<br>Follow good programming practices an use a private setter


<br>Be sure to scale the rotation speed using Time.deltaTime
<br>When you have successfully implemented the EnemyRotation script, it should work similar to the image below:<br><img alt="rotation-challenge-complete.webp" src="https://towerdefense.captaincoder.org/lib/media/rotation-challenge-complete.webp"><br><br>In the next section you will create a Waypoint component that you can use to specify the path your enemies will take.<br><a data-href="07 - Waypoints" href="https://towerdefense.captaincoder.org/lessons/07-waypoints.html" class="internal-link" target="_self" rel="noopener nofollow">07 - Waypoints</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/06-adding-an-enemy.html</link><guid isPermaLink="false">Lessons/06 - Adding an Enemy.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/create-empty.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/create-empty.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[07 - Waypoints]]></title><description><![CDATA[ 
 <br>In this section, you will create a Waypoint script that you will use to define positions in your world for your enemies to move between.<br><br>It is possible to create a Prefab directly in the Project explorer.<br>
<br>Navigate to your Prefabs folder
<br>Right Click
<br>Select Create &gt; Scene &gt; Prefab
<br>Name the Prefab "Waypoint"
<br><img alt="create-prefab-in-project.png" src="https://towerdefense.captaincoder.org/lib/media/create-prefab-in-project.png"><br><img alt="waypoint-prefab.png" src="https://towerdefense.captaincoder.org/lib/media/waypoint-prefab.png"><br>
<br>Double click the Waypoint prefab to open it
<br>If all went well, you should be in the Scenes | Prefab editor with an Empty Game Object named "Waypoint":<br><img alt="waypoint-scene.png" src="https://towerdefense.captaincoder.org/lib/media/waypoint-scene.png"><br>To make it easy to know where the Waypoint is when you add it to a Scene, you can add a 3D Sphere (or another shape if you prefer).<br>
<br>In the Waypoint's Hierarchy, Right Click
<br>Select 3D Object &gt; Sphere
<br><img alt="create-sphere.png" src="https://towerdefense.captaincoder.org/lib/media/create-sphere.png"><br>This will add a child object to the Waypoint called Sphere that is positioned at the center of the Waypoint. You can verify this by ensuring the Transform's position is (0, 0, 0)<br><img alt="verify-sphere.png" src="https://towerdefense.captaincoder.org/lib/media/verify-sphere.png"><br>You may have also noticed that the defaults Sphere generated comes with 3 additional components that are visible in the Inspector.<br>
<br>Mesh Filter - Used to specify the mesh of this object
<br>Mesh Renderer - Used to specify how the mesh is rendered
<br>Sphere Collider - Used by Unity's 3D Physics system to detect collisions
<br>Because the Waypoint does not need to collide with other objects, you can safely remove this component.<br>
<br>Locate the Sphere Collider component in the Inspector
<br>Click the 3 dots on the top right of the component
<br>Select Remove Component
<br><img alt="remove-sphere-collider.png" src="https://towerdefense.captaincoder.org/lib/media/remove-sphere-collider.png"><br>Another way you can exit the Prefab editor is by clicking the Scenes text that appears in the top left of the Scene view.<br><img alt="exit-prefab-editor.webp" src="https://towerdefense.captaincoder.org/lib/media/exit-prefab-editor.webp"><br>
<br>Exit the Prefab editor and return to your Scene
<br><br>You can add a Prefab directly into your Scene by dragging it into the Scene view.<br>
<br>Add a Waypoint at the starting point of your path
<br>Add a Waypoint at each corner of your path
<br>Add a Waypoint at the end of your path
<br><img alt="add-waypoints.webp" src="https://towerdefense.captaincoder.org/lib/media/add-waypoints.webp"><br><br>Once again, you might find it difficult to precisely place the objects in the Scene view. To help with placement, you can enable Grid Snapping.<br>
<br>In the Scene view, enable the Grid and Snapping settings from the Overlay Menu
<br><img alt="grid-and-snapping.png" src="https://towerdefense.captaincoder.org/lib/media/grid-and-snapping.png"><br>Clicking this button will show the Grid and Snap settings at the top of the Scene View<br><img alt="show-grid-and-snap-settings.webp" src="https://towerdefense.captaincoder.org/lib/media/show-grid-and-snap-settings.webp"><br>This menu allows you to specify the size of the Grid and allows you to turn on Snapping. <br>
<br>Set your Grid Size to 0.5
<br><img alt="set-grid-snap-size.png" src="https://towerdefense.captaincoder.org/lib/media/set-grid-snap-size.png"><br>
<br>Enable Grid Snapping
<br><img alt="enable-grid-snapping.png" src="https://towerdefense.captaincoder.org/lib/media/enable-grid-snapping.png"><br>
<br>Ensure that you have your Tool Handle settings are set to Pivot and Global
<br><img alt="pivot-position.png" src="https://towerdefense.captaincoder.org/lib/media/pivot-position.png"><br>With Grid Snapping enabled, you should now be able to place your waypoints more precisely on your tile map using the Move Tool.<br><img alt="move-tool.png" src="https://towerdefense.captaincoder.org/lib/media/move-tool.png"><br>
<br>With Grid Snapping enabled, use the Move Tool position your Waypoints
<br><img alt="demonstrate-snap-movement.webp" src="https://towerdefense.captaincoder.org/lib/media/demonstrate-snap-movement.webp"><br>If you're having trouble selecting your Waypoints, you can disable the ability to click your Tile Grid elements by hovering to the left of the Grid Game Object in the Hierarchy and clicking the finger icon.<br><img alt="disable-grid-clicking.png" src="https://towerdefense.captaincoder.org/lib/media/disable-grid-clicking.png"><br>This will disable your ability to click on that Game Object in the Scene View. You can re-enable interactions by clicking the finger icon again.<br><img alt="disable-grid-clicking.webp" src="https://towerdefense.captaincoder.org/lib/media/disable-grid-clicking.webp"><br><br>Currently, your Waypoints are visible in your Game View which means your player will see them during game play. You can test this by Entering Play Mode.<br><img alt="playmode-shows-waypoints.png" src="https://towerdefense.captaincoder.org/lib/media/playmode-shows-waypoints.png"><br>One way you could hide the Waypoints would be to disable the Mesh Renderer. (Don't do this)<br><img alt="disable-mesh-renderer.webp" src="https://towerdefense.captaincoder.org/lib/media/disable-mesh-renderer.webp"><br>However, it is very convenient to be able to see the Waypoints in the Scene view so we can adjust them.<br>Another option is to tell our Main Camera to ignore rendering them. This can be done by setting adding the Waypoints to a special rendering layer and then updating the Main Camera's Culling Mask to ignore that layer.<br><br>
<br>Open your Project Settings

<br>From the top menu Edit &gt; Project Settings


<br>Select the Tags and Layers tab on the left
<br><img alt="Assets/07 - Waypoints/tags-and-layers.png" src="https://towerdefense.captaincoder.org/lib/media/tags-and-layers.png"><br>
<br>Verify you're editing the Layers drop down
<br>Select Layer 6
<br>Enter the name "Waypoint"
<br><img alt="specify-waypoint-layer.png" src="https://towerdefense.captaincoder.org/lib/media/specify-waypoint-layer.png"><br>
<br>Close the Project Settings Window
<br><br>In the Inspector you can see and modify the layer of a Game Object.<br><img alt="where-is-layer.png" src="https://towerdefense.captaincoder.org/lib/media/where-is-layer.png"><br>
<br>Select a Waypoint from your Hierarchy

<br>Alternatively you could open it in Prefab mode


<br>Set the Layer to Waypoint 
<br>When prompted select "Yes, Change Children"

<br>This will set the layer of all children objects to the selected layer


<br><img alt="change-children.png" src="https://towerdefense.captaincoder.org/lib/media/change-children.png"><br>
<br>If you are not editing in Prefab mode, don't forget to apply the Override
<br><br>Culling refers to the process of determining which objects in a scene are not visible to the camera and excluding them from rendering to improve performance. Next, you will update the Main Camera's Culling Mask to exclude the Waypoint layer.<br>
<br>Select the Main Camera
<br>In the Inspector locate the Camera components Rendering settings
<br><img alt="culling-mask-settings.png" src="https://towerdefense.captaincoder.org/lib/media/culling-mask-settings.png"><br>By default, the camera's Culling Mask will render everything. <br>
<br>Select the Drop Down and unselect the Waypoint layer
<br>You can verify that the camera is no longer rendering your Waypoints by entering the Game View.<br><img alt="verify-waypoints-hidden.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-waypoints-hidden.webp"><br><br>With your Waypoints placed on your map, it is now time to make them aware of their order. You can accomplish this by creating a Waypoint component that knows which Waypoint comes next in the sequence.<br>
<br>Create a Waypoint MonoBehaviour
<br>Delete the Start and Update methods from the template, you won't need them
<br>Add a Waypoint property called Next

<br>Remember to use good programming practices and us a private set


<br>Serialize the Next property using the [field: SerializeField] attribute
<br><img alt="waypoint-component.png" src="https://towerdefense.captaincoder.org/lib/media/waypoint-component.png"><br><br>Can you remember how to add your new component to your Waypoint prefab? If you're having trouble, you can review how you added the EnemyMovement component in <a data-href="06 - Adding an Enemy" href="https://towerdefense.captaincoder.org/lessons/06-adding-an-enemy.html" class="internal-link" target="_self" rel="noopener nofollow">06 - Adding an Enemy</a><br>
<br>Add the Waypoint component to your Waypoint Prefab
<br>Verify that each Waypoint object in your scene has the component
<br><img alt="verify-waypoints.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-waypoints.webp"><br><br>By creating a Next property that has the type Waypoint , you have made it possible to specify the Next property of each Waypoint in the Inspector.<br>
<br>Select your starting Waypoint Game Object from the Hierarchy
<br>In the Inspector click the small circle next to the Next property
<br>Select the second Waypoint Game Object from the list
<br>Note: If you click the object in the Next field, it will highlight in the Hierarchy. If you double-click the object in the Next field, it will select that object.<br><img alt="set-next-on-first-waypoint.webp" src="https://towerdefense.captaincoder.org/lib/media/set-next-on-first-waypoint.webp"><br>You can also set the an object property in the Inspector by dragging a game object into the property field.<br><img alt="set-waypoint-dragging.webp" src="https://towerdefense.captaincoder.org/lib/media/set-waypoint-dragging.webp"><br>Sometimes this can be challenging to do because you can accidentally click the object you're trying to drag, changing the selected object in the Inspector. To help with this, you can open a new inspector window for a specific game object by Right Clicking on it and select Properties.<br><img alt="properties-window.webp" src="https://towerdefense.captaincoder.org/lib/media/properties-window.webp"><br><br>Test out each of the methods for setting the Next for each of your Waypoints property to figure out which one works best for you. You should leave the final Waypoint's Next property as None. You will use this to signal to the Enemy that it has reached the end of the path.<br><br>Depending on the number of Waypoints you have created, your Hierarchy might be feeling a bit crowded. To help with this, create an Empty Parent that contains all of the Waypoints as children object.<br>When you're finished, your Hierarchy should look similar to the image below:<br><img alt="organize-waypoints.png" src="https://towerdefense.captaincoder.org/lib/media/organize-waypoints.png"><br><br>While setting each of the Next properties, you may have sensed that this process could be error prone. That is, it is easy to set the wrong Waypoint. To help with this, you can use the OnDrawGizmos and OnDrawGizmosSelected methods to draw additional information in the Scene View.<br><br>The OnDrawGizmosSelect method is used to draw information in the Scene View when a Game Object is selected. <br>
<br>Read the Friendly Manual

<br><a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnDrawGizmosSelected.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnDrawGizmosSelected.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnDrawGizmosSelected()</a>
<br><a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Handles.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Handles.html" target="_blank">Unity - Scripting API: Handles</a>


<br>Add using UnityEditor; to your using statements

<br>Note: This will allow you to access the Handles API


<br>Add the void OnDrawGizmosSelected() to your Waypoint script

<br>Note: Spelling and casing must match exactly


<br>Set the Handles.color property to Color.red
<br>Use the Handles.DrawLine method to draw a line between the Waypoint and its Next
<br><img alt="drawing-red-line-on-selected.png" src="https://towerdefense.captaincoder.org/lib/media/drawing-red-line-on-selected.png"><br>
With your new gizmo in place, you can now more easily verify that your Waypoints are connected properly:<br><img alt="view-gizmo-line.webp" src="https://towerdefense.captaincoder.org/lib/media/view-gizmo-line.webp"><br><br>You most likely encountered NullReferenceException when you selected your final Waypoint. This is because the Next property is set to None. For class objects, this is the equivalent to a null value. To prevent this, you should add a null check to your code that exists your method early if Next == null.<br><img alt="null-check.png" src="https://towerdefense.captaincoder.org/lib/media/null-check.png"><br><br>If you prefer, you can also use the OnDrawGizmos method which is executed in the Scene View even when the Game Object is not selected.<br>
<br>Rename your OnDrawGizmosSelected method to OnDrawGizmos
<br><img alt="on-draw-gizmos.png" src="https://towerdefense.captaincoder.org/lib/media/on-draw-gizmos.png"><br>In the Scene View verify your path is correct<br><img alt="view-all-gizmo-lines.webp" src="https://towerdefense.captaincoder.org/lib/media/view-all-gizmo-lines.webp"><br><br>It is important to review what you've learned in this lesson and apply it in a new context. Before continuing, I encourage you to attempt the <a data-href="Binary Waypoint Challenge" href="https://towerdefense.captaincoder.org/challenges/02-binary-waypoint-challenge/binary-waypoint-challenge.html" class="internal-link" target="_self" rel="noopener nofollow">Binary Waypoint Challenge</a> in which you will be challenged to create a new script to accommodate splitting paths.<br><img alt="binary-waypoint-connections.png" src="https://towerdefense.captaincoder.org/lib/media/binary-waypoint-connections.png"><br><br>With your Waypoints set up, it is now time to update your Enemy Movement script to move between each Waypoint.]]></description><link>https://towerdefense.captaincoder.org/lessons/07-waypoints.html</link><guid isPermaLink="false">Lessons/07 - Waypoints.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/create-prefab-in-project.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/create-prefab-in-project.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[08 - Waypoint Traveler]]></title><description><![CDATA[ 
 <br>With your Waypoints set up, it is time to update your Enemy to follow your Waypoints.<br><br>
<br>Enemy has a Target Waypoint that they move toward
<br>When the Enemy reaches their Target they query the Waypoint for the Next Waypoint  and update their Target Waypoint
<br>If there is no Next, the Enemy stops moving
<br><br>You can utilize Unity's built in method Vector3.MoveTowards to do most of the heavy lifting for the Enemy's movement.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Vector3.MoveTowards.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Vector3.MoveTowards.html" target="_blank">Unity - Scripting API: Vector3.MoveTowards</a>
<br>Add a Target Waypoint property to your Enemy Movement script
<br>Be sure to Serialize the property so it can be accessed in the Inspector
<br><img alt="add-waypoint-target.png" src="https://towerdefense.captaincoder.org/lib/media/add-waypoint-target.png"><br>
<br>In the Update method, call Vector3.MoveTowards to update the Enemy's position

<br>Note: Use Time.deltaTime*Speed as the maxDistanceDelta


<br><img alt="use-vector3-move-towards.png" src="https://towerdefense.captaincoder.org/lib/media/use-vector3-move-towards.png"><br>
<br>In the Inspector, set the enemy's Target Waypoint to your first waypoint
<br><img alt="set-first-waypoint.png" src="https://towerdefense.captaincoder.org/lib/media/set-first-waypoint.png"><br>
<br>Enter Play Mode and verify that your Enemy moves to the specified Waypoint
<br><img alt="move-to-waypoint.webp" src="https://towerdefense.captaincoder.org/lib/media/move-to-waypoint.webp"><br>While you are in Play Mode you can even switch the Waypoint to test that when the Waypoint is changed, the Enemy will move to the new Target<br><img alt="change-waypoint-in-playmode.webp" src="https://towerdefense.captaincoder.org/lib/media/change-waypoint-in-playmode.webp"><br><br>You need a way to determine how close the Enemy is to their Target Waypoint. This can be done using Vector3.Distance.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Vector3.Distance.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Vector3.Distance.html" target="_blank">Unity - Scripting API: Vector3.Distance</a>
<br>After the Enemy has moved, calculate their distance from the Target Waypoint
<br>If the distance is sufficiently close to 0, the Enemy's Target updates to the next Waypoint
<br><img alt="calculate-distance.png" src="https://towerdefense.captaincoder.org/lib/media/calculate-distance.png"><br>
<br>Enter Play Mode to verify your Enemy moves between each Waypoint
<br><img alt="verify-waypoint-traveler.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-waypoint-traveler.webp"><br>You may have noticed the odd expressions distance &lt;= 0 and might be asking yourself, "Why are we checking if the distance is less than or equal to 0 and not just equal to 0?". Great question! I'm so glad you asked! As you may already be aware, floating point numbers are approximated values, that is they should not be used for precise calculations (See: <a data-tooltip-position="top" aria-label="https://stackoverflow.com/questions/588004/is-floating-point-math-broken" rel="noopener nofollow" class="external-link" href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken" target="_blank">Is floating-point math broken? - Stack Overflow</a>for greater detail).<br>In our case, it is possible that we may not actually get a value of 0, and instead we want to check if the distance is sufficiently close to 0. In Unity, this often done using Mathf.Epsilon (which happens to be approximately 0.00001f).<br>
<br>Update your code to use Mathf.Epsilon in place of 0
<br><img alt="use-mathf-epsilon.png" src="https://towerdefense.captaincoder.org/lib/media/use-mathf-epsilon.png"><br><br>You may have noticed, when your Enemy reaches the final Waypoint an error message appears in the Unity Console.<br>
<br>Fix the NullReferenceException
<br><img alt="nullreference-exception.png" src="https://towerdefense.captaincoder.org/lib/media/nullreference-exception.png"><br><br>Currently, your Enemy begins its journey by moving to your first Waypoint. You may have already moved the Enemy to start at that position when you enter Play Mode. However, it is not guaranteed. One way to fix this, is to use the Start() method to move the Enemy to their first Target before the first game frame.<br>
<br>Update your Start() method to set the Enemy's initial position to the Target's position.
<br><img alt="set-enemys-initial-position.png" src="https://towerdefense.captaincoder.org/lib/media/set-enemys-initial-position.png"><br><br>If you placed your Waypoints such that their Y position is at 0 (level with your grid), you might have noticed that when your Enemy's model is slightly below the ground. You might be tempted to move your Waypoint's such that they are slightly above the ground. This would solve this issue. However, you can instead adjust your Enemy Prefab to such that the inner model is slightly elevated relative to the parent object.<br>
<br>Open the Enemy Prefab
<br>Select the model in the Hierarchy
<br>Set the Y position to (0.101)

<br>The dirt tile is 0.1 units thick. Setting the Y position to be slightly above will make your enemy model appear on top of the tile.


<br><img alt="adjust-model-y-position.png" src="https://towerdefense.captaincoder.org/lib/media/adjust-model-y-position.png"><br><br>Unity provides a method called Transform.LookAt that can be used to make a Game Object rotate toward another Game Object. You can utilize this, to make your Enemy face their Target Waypoint.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.LookAt.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.LookAt.html" target="_blank">Unity - Scripting API: Transform.LookAt</a>
<br>Remove the Enemy Rotation component from your Enemy
<br>When the Enemy changes Targets, call the Transform.LookAt method to rotate the Enemy to face the next Waypoint
<br>Fix any NullReferenceExceptions that occur
<br>When you have successfully completed this challenge, your Enemy should look similar to the one in the video below.<br><img alt="challenge-complete.webp" src="https://towerdefense.captaincoder.org/lib/media/challenge-complete.webp"><br><br>With your Enemy's moving, it is time to create an Enemy Spawner that will generate additional enemies during game play.]]></description><link>https://towerdefense.captaincoder.org/lessons/08-waypoint-traveler.html</link><guid isPermaLink="false">Lessons/08 - Waypoint Traveler.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/add-waypoint-target.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/add-waypoint-target.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[09 - Enemy Spawner]]></title><description><![CDATA[ 
 <br>In this section, you will implement an Enemy Spawner that repeatedly spawns new Enemies for your player to destroy!<br><br>
<br>Creates an Enemy
<br>Sets the Enemies first Target Waypoint
<br>Waits for 5 seconds before repeating
<br><br>Before implementing the Enemy Spawner script, create a Prefab that can be placed on your map where Enemies will spawn. Then, place one in your world at the start of your path.<br>When you're finished, it will look similar to the image below. Note: You can hide your Waypoints from being viewed in the Scene View by clicking the Eye Icon in the Hierarchy next to the parent container. This can be helpful when placing your Enemy Spawner.<br><img alt="example-enemy-spanwer-prefab.png" src="https://towerdefense.captaincoder.org/lib/media/example-enemy-spanwer-prefab.png"><br><br>
<br>Create an EnemySpawner MonoBehaviour Script with the following properties

<br> Waypoint StartTarget - This will be the first Target Waypoint for the spawned Enemy
<br>EnemyMovement Enemy - This will be the Enemy that will be spawned
<br>float Delay - This will be the number of seconds between spawns


<br>Serialize each property so they can be specified in the Inspector
<br><img alt="enemy-spawner-properties.png" src="https://towerdefense.captaincoder.org/lib/media/enemy-spawner-properties.png"><br><br>To keep your code organized, add a Spawn() method that creates an Enemy and sets the Enemy's first Target waypoint.  To create a Game Object during game play, you can call Object.Instantiate. This will add the specified Game Object to the Scene.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Object.Instantiate.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Object.Instantiate.html" target="_blank">Unity - Scripting API: Object.Instantiate</a>
<br>Add a Spawn() method

<br>Call Object.Instantiate specifying the Enemy
<br>Set the new Enemy's Target to the StartingWaypoint


<br><img alt="first-draft-spawn.png" src="https://towerdefense.captaincoder.org/lib/media/first-draft-spawn.png"><br>You likely noticed that the Target property of your EnemyMovement cannot be set because it is private. Before your program will compile, you need to modify the EnemyMovement script to allow the Target property to be set.<br>
<br>Update your EnemyMovement.Target property to have a public setter
<br>Note: It is considered a good practice to use private access modifiers whenever possible. This reduces the potential search space for bugs related to that property being modified. When you change it to public the property can be accessed anywhere in your code which mean you can introduce bugs related to the property anywhere in your code.<br><img alt="update-target-to-public.png" src="https://towerdefense.captaincoder.org/lib/media/update-target-to-public.png"><br>With the EnemyMovement.Target updated, your EnemySpawner should now compile<br><br>For now, test your Spawn method by calling it once in Start()<br>
<br>Call Spawn() from the EnemySpawner.Start method
<br><img alt="call-spawn-in-start.png" src="https://towerdefense.captaincoder.org/lib/media/call-spawn-in-start.png"><br><br>Before you can test your Spawn() method, you need give your Prefab the Enemy Spawner component and specify the initial values.<br>
<br>In the Inspector add a Enemy Spawner component to your Enemy Spawner prefab.
<br>Set the initial StartingWaypoint from your scene's Hierarchy
<br><img alt="set-starting-waypoint.png" src="https://towerdefense.captaincoder.org/lib/media/set-starting-waypoint.png"><br>You might be tempted to set the Enemy property using the Enemy object in your Scene. However, if this object is destroyed, it will break your Spawner. Instead, you can use a Prefab from your Project which won't be destroyed in the Scene.<br>
<br>Delete the Enemy that is currently in your Hierarchy
<br>Set the Enemy property to use the Enemy Prefab from your Project View
<br><img alt="set-enemy-with-prefab.png" src="https://towerdefense.captaincoder.org/lib/media/set-enemy-with-prefab.png"><br>With your Enemy Spawner wired up, enter Play Mode to verify that a new Enemy is spawned. If all went well, you should see a new Enemy(Clone) in your Hierarchy as well as an Enemy moving between your Waypoints.<br><img alt="verify-spawn-method.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-spawn-method.webp"><br><br>You can use Unity's MonoBehaviour.InvokeRepeating method to repeatedly call a method by its name.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.InvokeRepeating.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.InvokeRepeating.html" target="_blank">Unity - Scripting API: MonoBehaviour.InvokeRepeating</a>
<br>In EnemySpawner.Start() call InvokeRepeating on the Spawn method

<br>Pro Tip: Use nameof(Spawn) rather than a hard coded string.


<br><img alt="invoke-repeating.png" src="https://towerdefense.captaincoder.org/lib/media/invoke-repeating.png"><br><br>Enter Play Mode to test your Enemy Spawner. You may find it helpful to set the Delay to a smaller number for testing. Note: Because you use Delay in your Start method, you cannot change the Delay of the Enemy Spawner while in Play Mode.<br>If all went well, your game should look similar to the video below:<br><img alt="verify-repeating-spawn.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-repeating-spawn.webp"><br><br>In this challenge, you will update your Enemy Spawner to only spawn a specified number of Enemies. After the specified number of Enemies have spawned, you will use MonoBehaviour.CancelInvoke() to stop the EnemySpawner.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.CancelInvoke.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.CancelInvoke.html" target="_blank">Unity - Scripting API: MonoBehaviour.CancelInvoke</a>
<br>Add a property SpawnsRemaining to your EnemySpawner

<br>Set the default value to 5.


<br>In your Spawn() method, decrement SpawnsRemaining
<br>When SpawnsRemaining is 0, call CancelInvoke()
<br>When you have successfully implemented this challenge, your game should look similar to the video below.<br><img alt="verify-repeating-spawn 1.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-repeating-spawn-1.webp"><br><br>If the EnemySpawner becomes disabled, InvokeRepeating will continue to execute. This is typically not the desired behaviour. It is considered a best practice to call CancelInvoke() in your OnDisable() method to prevent strange side effects that might occur when using InvokeRepeating.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnDisable.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnDisable.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnDisable()</a>
<br>Add OnDisable() to your EnemySpawner
<br>Call CancelInvoke() in OnDisable()
<br><img alt="ondisable-cancelinvoke.png" src="https://towerdefense.captaincoder.org/lib/media/ondisable-cancelinvoke.png"><br>Verify that your enemies stop spawning if you disable the EnemySpawner:<br><img alt="verify-ondisable.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-ondisable.webp"><br><br>You may have noticed that when you re-enable the Enemy Spawner, the remaining Enemies do not continue spawning. This is because Start() is only called once per Game Object the first time it becomes active in the Scene. If you would like to run code every time a Game Object becomes active, you an use OnEnable().<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnEnable.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnEnable.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnEnable()</a>
<br>Update your EnemySpawner to have an OnEnable method
<br>Use OnEnable to call InvokeRepeating instead of the Start() method
<br>When implemented correctly, your game should act similar to the video below:<br><img alt="verify-onenable.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-onenable.webp"><br><br>Now that you are able to spawn enemies into you game. It is time to design a turret that rotates to follow nearby enemies: <a data-href="10 - Rotating Turret" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/09-enemy-spawner.html</link><guid isPermaLink="false">Lessons/09 - Enemy Spawner.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/example-enemy-spanwer-prefab.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/example-enemy-spanwer-prefab.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[10 - Rotating Turret]]></title><description><![CDATA[ 
 <br>In this lesson, you will create a simple Turret that rotates to face enemies that are nearby.<br><br>
<br>Create a new Prefab to represent a turret
<br>Add a model to the Prefab (I will be using the weapon-ballista model but you may use any model)
<br>Create a new TurretTarget MonoBehaviour Script
<br>Attach the TurretTarget component to your Turret Prefab
<br>Add a Turret to your Scene
<br>Adjust the model's, Y position to be slightly above your ground tile. The grass / snow tiles are 0.2 units thick.
<br>Add a few instances of your Turret Prefab to your scene
<br>If all went well, your Scene should look similar to this:<br><img alt="add-turret-to-scene.png" src="https://towerdefense.captaincoder.org/lib/media/add-turret-to-scene.png"><br><br>Before your turret can rotate to face an enemy, it must be able to detect enemies that are within range. To do this, you will define an Area of Engagement using a collider that will track enemies that are within range.<br>
<br>Add a Sphere to your Turret
<br><img alt="create-spehere.webp" src="https://towerdefense.captaincoder.org/lib/media/create-spehere.webp"><br>
<br>Rename the Sphere (I recommend "Area of Engagement")
<br>You can change the range of the Area of Engagement by adjusting the scale<br>
<br>Adjust the range of the Area of Engagement by adjusting the scale.

<br>The scale represents the diameter of the Sphere. A size of 3 is large enough to hit all 8 surrounding tiles. Feel free to 
<br>Note: You can click the constraint button to change all 3 axes at the same time


<br><img alt="adjust-scale.webp" src="https://towerdefense.captaincoder.org/lib/media/adjust-scale.webp"><br>
<br>Find the Sphere Collider component in the Inspector
<br>Enable Is Trigger

<br>In Unity's physics system, trigger colliders allow other objects to pass through them.


<br><img alt="create-trigger-collider.png" src="https://towerdefense.captaincoder.org/lib/media/create-trigger-collider.png"><br><br>Currently, your Area of Engagement is being drawn as a hideous sphere in both the Scene and Game views. <br><img alt="hideous-aoe.webp" src="https://towerdefense.captaincoder.org/lib/media/hideous-aoe.webp"><br>You can create a transparent Material that will allow your player to visualize the area of engagement while not preventing them from seeing enemies that pass through.<br>
<br>Create a Materials folder in your Assets
<br>Right click in the Project View
<br>Select Create &gt; Rendering &gt; Material
<br><img alt="create-rendering-material.png" src="https://towerdefense.captaincoder.org/lib/media/create-rendering-material.png"><br>
<br>Name the Material (I recommend "Area of Effect Material")
<br>Select the Material
<br>Drag the Material on to your Area of Effect in the Prefab Editor

<br>This will change the Material in the Mesh Renderer component. Alternatively, you could set it directly in the Inspector


<br><img alt="set-aoe-material.png" src="https://towerdefense.captaincoder.org/lib/media/set-aoe-material.png"><br><img alt="assign-aoe-material.webp" src="https://towerdefense.captaincoder.org/lib/media/assign-aoe-material.webp"><br>
<br>Select the Area of Effect Material in the Project View
<br>In the Inspector, set Surface Type to Transparent
<br><img alt="transparent-surface-type.png" src="https://towerdefense.captaincoder.org/lib/media/transparent-surface-type.png"><br>
<br>Click on the color to the right of Base Map to change the color of the Material 

<br>Be sure to adjust the Alpha value so the material is transparent


<br><img alt="set-aoe-color.webp" src="https://towerdefense.captaincoder.org/lib/media/set-aoe-color.webp"><br>Adjusting the Metallic Map and Smoothness property of the Surface Input changes how reflective the material appears. To make the material have no "shine" to it, set both of these values to 0.<br>
<br>Set the Metallic Map and Smoothness properties to 0
<br><img alt="metalic-map-smoothness-0.webp" src="https://towerdefense.captaincoder.org/lib/media/metalic-map-smoothness-0.webp"><br><br>You may have noticed that it is quite difficult to determine which tiles are within the area of engagement in the isometric game view, especially the tiles that are on the far side of the turret.<br><img alt="hard-to-tell-tiles.png" src="https://towerdefense.captaincoder.org/lib/media/hard-to-tell-tiles.png"><br>To help with this, you can modify the Y scale of the Area of Engagement. This will make it more obvious where the edge of the collider is located.<br>
<br>In the Prefab Editor, select your Area of Engagement
<br>Set the Y Scale to 1

<br>You may need to disable your scale constraint toggle


<br><img alt="scale-aoe-y.webp" src="https://towerdefense.captaincoder.org/lib/media/scale-aoe-y.webp"><br>Note: The Sphere Collider uses the largest of the 3 scales to determine its size. The Colliders are shown in the Scene View using green lines. You can verify the size of your Sphere Collider by clicking on the Area of Engagement in the Hierarchy.<br><img alt="verify-collider-size.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-collider-size.webp"><br><br>Before you can detect if an enemy has entered an Area of Engagement, you must first add a Collider to your Enemy Prefab.<br><br>
<br>Open your Enemy Prefab 
<br>Add a Capsule Collider component to it
<br>Make the Collider a Trigger
<br>Adjust the Capsule Collider's size to roughly the size of your enemy

<br>You can use the Edit Collider button on the Capsule Collider component to edit this in the Prefab View


<br>When you're finished, your Enemy Prefab should look similar to the image below:<br><img alt="add-capsule-collider.png" src="https://towerdefense.captaincoder.org/lib/media/add-capsule-collider.png"><br><br>You can use the Collider.OnTriggerEnter(Collider) method to detect when a Collider has entered a Trigger Collider. However, for the physics system to detect this, at least one of the Game Objects must be part of a Rigidbody. In this case, you can add a Rigidbody to the Area of Effect that is Kinematic.<br>
<br>Open your Turret Prefab
<br>Select the Area of Engagement from the Hierarchy
<br>In the Inspector, add a Rigidbody component
<br>Set the Rigidbody to be Kinematic

<br>A Rigidbody that is Kinematic is unaffected by simulated physics forces.


<br><img alt="add-kinematic-rigidbody.webp" src="https://towerdefense.captaincoder.org/lib/media/add-kinematic-rigidbody.webp"><br><br>At this point, everything is ready for you to detect when an Enemy has entered the Area of Engagement using the OnTriggerEnter(Collider) method. <br>
<br>Create an AreaOfEngagement MonoBehaviour Script
<br>In the Turret Prefab, add the component to your Area of Engagement object
<br><img alt="area-of-engagement-component.png" src="https://towerdefense.captaincoder.org/lib/media/area-of-engagement-component.png"><br><br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerEnter.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerEnter.html" target="_blank">Unity - Scripting API: Collider.OnTriggerEnter(Collider)</a>
<br>Add a void OnTriggerEnter(Collider) to your AreaOfEngagement MonoBehaviour
<br>Add a Debug.Log() to verify that the trigger is working
<br><img alt="area-of-engagment.png" src="https://towerdefense.captaincoder.org/lib/media/area-of-engagment.png"><br>
<br>Enter Play Mode and open the Console to verify the Trigger is working
<br>If all went well, your console should look similar to the video below<br><img alt="verify-trigger-working.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-trigger-working.webp"><br><br>You can use a List&lt;Transform&gt; to track the potential targets.<br>
<br>Add a List&lt;Transform&gt; Targets property to your Area of Engagement

<br>If you Serialize this property, you can view it in the Inspector


<br>In OnTriggerEnter, add the entering collider to the Targets
<br><img alt="add-targets.png" src="https://towerdefense.captaincoder.org/lib/media/add-targets.png"><br>
<br>Enter Play Mode and verify that the Targets are being added to your Area of Engagement
<br>If all went well, you should see the Enemy's collider being added to the Targets list when they enter the trigger collider.<br><img alt="verify-targets-added.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-targets-added.webp"><br><br>Next, you will want to make it such that your Area of Engagement removes Enemies as they exit the trigger collider.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerExit.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerExit.html" target="_blank">Unity - Scripting API: Collider.OnTriggerExit(Collider)</a>
<br>Implement OnTriggerExit(Collider) such that the collider's transform is removed when the enemy exits the Area of Engagement.
<br>If all went well, you should see the collider's being removed from the Targets list in the inspector. You may find it useful to increase the size of the Area of Engagement to test this.<br><img alt="challenge-remove-transforms.webp" src="https://towerdefense.captaincoder.org/lib/media/challenge-remove-transforms.webp"><br><br>With your Area of Engagement script tracking the enemies that are near the Turret you can now implement the TurretTarget MonoBehaviour to rotate to face one an Enemy in the Targets list<br>
<br>Add a AreaOfEngagement AreaOfEngagement property
<br>Add a GameObject Model property
<br>Serialize both properties and set them in the Inspector
<br><img alt="turret-target-aoe-model.png" src="https://towerdefense.captaincoder.org/lib/media/turret-target-aoe-model.png"><br>
<br>Set both properties in the Inspector to reference the model of the Turret Prefab
<br><img alt="set-aoe-model-inspector.png" src="https://towerdefense.captaincoder.org/lib/media/set-aoe-model-inspector.png"><br><br>
<br>In Update, if AreaOfEngagement.Targets is not empty

<br>Call Model.transform.LookAt to rotate the model to face the first Enemy in AoE.Targets


<br>If all went well, you should see your Turrets rotating to face enemies as they pass by:<br><img alt="rotate-challenge-complete.webp" src="https://towerdefense.captaincoder.org/lib/media/rotate-challenge-complete.webp"><br><br>With your turrets successfully tracking the enemies as they pass by, it is time to create a Projectile that can be fired at the enemies to destroy them.<br><a data-href="11 - Projectile" href="https://towerdefense.captaincoder.org/lessons/11-projectile.html" class="internal-link" target="_self" rel="noopener nofollow">11 - Projectile</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html</link><guid isPermaLink="false">Lessons/10 - Rotating Turret.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:44 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/add-turret-to-scene.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/add-turret-to-scene.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[11 - Projectile]]></title><description><![CDATA[ 
 <br>In this lesson, you will create a Projectile that will move toward an Enemy. Upon reaching the Enemy, it will apply damage. If an enemy receives enough damage, it will be destroyed.<br><br>Before your turrets can shoot a projectile, you must first create a Projectile Prefab to spawn.<br>
<br>Create a new Prefab for your Projectile
<br>Add a model to the Prefab (I will be using weapon-ammo-arrow but you can use any model you like)
<br>Create a Projectile MonoBehaviour Script
<br>Add the Projectile component to the Prefab
<br>When you're finished it should look similar to the image below:<br><img alt="projectile-completed.png" src="https://towerdefense.captaincoder.org/lib/media/projectile-completed.png"><br><br>It is often quicker to create a new scene to test your Prefabs and Scripts to see if they work in a constrained environment before putting them into your game.<br>
<br>Create a new Folder called Test Scenes
<br>Right click, Create &gt; Folder
<br>Create a Projectile Test Scene
<br>Rick click, Create &gt; Scene &gt; Scene
<br><img alt="create-scene-scene.png" src="https://towerdefense.captaincoder.org/lib/media/create-scene-scene.png"><br><br>Within the Projectile Test Scene, you will set up a situation to determine if the Projectile is working as intended.<br>
<br>A Projectile will have a Target that it will move toward. 
<br>When it reaches the Target, it should deal damage to the Enemy. 
<br>When it reaches the Target, it should be removed from the Scene.
<br>If the Enemy has sustained Damage equal to or greater than their Health, the enemy should be removed from the Scene.
<br><br>Before you are able to create your test, you will need to add health and damage to your Enemy.<br>
<br>Create a new Health MonoBehaviour Script
<br>Add a float BaseHealth property
<br>Add a float Damage property
<br><img alt="health-script-base.png" src="https://towerdefense.captaincoder.org/lib/media/health-script-base.png"><br>
<br>Add a Health component to your Enemy Prefab
<br><img alt="add-health-to-enemy.png" src="https://towerdefense.captaincoder.org/lib/media/add-health-to-enemy.png"><br><br>
<br>In your Projectile script 
<br>Add a float Speed property, set the default value to 2
<br>Add a float Damage property, set the default value to 1
<br>Add a Transform Target property
<br><img alt="projectile-speed-damage-target.png" src="https://towerdefense.captaincoder.org/lib/media/projectile-speed-damage-target.png"><br><br>
<br>Open your Projectile Test Scene
<br>Add an Enemy to the Scene
<br>Set the Enemy's BaseHealth to 2
<br>Add 2 Projectiles to the Scene
<br>Position the Projectiles such that one is further away from the Enemy
<br>Set the Projectiles Target to be the Enemy
<br>When you're finished, your test scene should look similar to the video below:<br><img alt="projectile-test-scene-setup.webp" src="https://towerdefense.captaincoder.org/lib/media/projectile-test-scene-setup.webp"><br><br>
<br>Add an Update method to your Projectile Script
<br>The Projectile should rotate to face the Target
<br>The Projectile should move toward the Target at Speed units per second
<br>If the Projectile is sufficiently close to the Target display a "Hit" message in the console
<br>Fix any NullReferenceExceptions that you encounter
<br>When you have finished the challenge, it should look similar to the video below:<br><img alt="projectile-challenge-completed.webp" src="https://towerdefense.captaincoder.org/lib/media/projectile-challenge-completed.webp"><br><br>When the Projectile has reached its target, it should remove itself from the scene. This can be done using the Object.Destroy(Object) method.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/ScriptReference/Object.Destroy.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/ScriptReference/Object.Destroy.html" target="_blank">Unity - Scripting API: Object.Destroy</a>
<br>Update your code to call Object.Destroy when the Projectile has reach its Target
<br>Note: You should destroy gameObject which is the Game Object the Projectile component is attached to.<br><img alt="destroy-gameobject-1.png" src="https://towerdefense.captaincoder.org/lib/media/destroy-gameobject-1.png"><br>
<br>Enter Play Mode to test that your Projectiles are removed from the Hierarchy when they reach the Target
<br><img alt="verify-projectiles-removed.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-projectiles-removed.webp"><br><br>Next, you will add an ApplyHit(Projectile) method to your Health script that will add Projectile.Damage. <br><br>
<br>Open the Health script
<br>Add a public void ApplyHit(Projectile)
<br>Increase Health.Damage by Projectile.Damage
<br><img alt="apply-hit-damage.png" src="https://towerdefense.captaincoder.org/lib/media/apply-hit-damage.png"><br><br>Before the Projectile is destroyed, you must call Health.ApplyHit specifying that this Projectile has reached the Target. However, because Target is a Transform, you cannot call the ApplyHit method directly.  Furthermore, the Target is actually a child of the Enemy Prefab. To find the Health component attached to the Parent object, you can use the Component.GetComponentInParent method to find the Health component.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Component.GetComponentInParent.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Component.GetComponentInParent.html" target="_blank">Unity - Scripting API: Component.GetComponentInParent</a>
<br>Open your Projectile Script
<br>Update your code to use Target.GetComponentInParent&lt;Health&gt;() to retrieve the Health component of the Target
<br>If a Health component was found, call ApplyHit(this)
<br><img alt="get-health-apply-hit.png" src="https://towerdefense.captaincoder.org/lib/media/get-health-apply-hit.png"><br>
<br>Verify that the Enemy's Damage property updates properly in your Test Projectile Scene 
<br><img alt="verify-damage-is-updating.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-damage-is-updating.webp"><br><br>Finally, update your Health script to destroy the enemy and remove it from the Scene if it has taken damage greater than or equal to its BaseHealth.<br>When you have finished, your Test Projectile Scene should look similar to the video below:<br><img alt="verify-enemy-is-destroyed.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-enemy-is-destroyed.webp"><br><br>The test you have created is for the best case scenario. That is, the Enemy is destroyed after receiving 2 damage. What happens if there is a 3rd projectile?<br>
<br>Add a 3rd Projectile to your scene that Targets the Enemy
<br>Place it in the Scene such that all 3 Projectiles reach the Enemy at different times
<br>Enter Play Mode, what happens?
<br>Depending on how you implemented your Projectile, it may throw a NullReferenceException when the Target is destroyed. It may also simply stop moving when the Target is destroyed. If you check in the Inspector, you will see that the Target is marked as Missing. This is because it was destroyed.<br><img alt="missing-target.webp" src="https://towerdefense.captaincoder.org/lib/media/missing-target.webp"><br>As a developer, you will often need to account for situations that are not ideal but are technically possible during game play. These are often referred to as Edge Cases because they exist at the "boundaries" of what is expected. As you continue to develop your skills, you will begin to develop an intuition for Edge Cases and be able to anticipate many (but not all) of them.<br><br>There are many possible ways to handle this particular Edge Case. One of the simplest solutions is to destroy the Projectile if it has no Target. <br>
<br>Update your Projectile script such that if the Target is null, the Projectile is removed from the Scene
<br>When you have successfully implemented this challenge, your scene should act similar to the video below:<br><img alt="projectile-challenge-complete.webp" src="https://towerdefense.captaincoder.org/lib/media/projectile-challenge-complete.webp"><br><br>With your Projectile Prefab working, it is time to add a script that allows your turrets to fire them.<br><a data-href="12 - Firing Projectiles" href="https://towerdefense.captaincoder.org/lessons/12-firing-projectiles.html" class="internal-link" target="_self" rel="noopener nofollow">12 - Firing Projectiles</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/11-projectile.html</link><guid isPermaLink="false">Lessons/11 - Projectile.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:44 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/projectile-completed.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/projectile-completed.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[12 - Firing Projectiles]]></title><description><![CDATA[ 
 <br>In this lesson, you will implement a TurretAttack MonoBehaviour that will spawn Projectiles that will target enemies within the Turret's Area of Engagement.<br><br><br>Your TurretAttack will need to be able to check if there are any Targets in the AreaOfEngagement. If there is at least one target, it will need to Instantiate a Projectile. Then, it should wait for some amount of time before firing again. Finally, to be able to check if it can fire again, it should track if it is currently cooling down.<br>
<br>Create a new TurretAttack MonoBehaviour Script
<br>Add an AreaOfEngagement AoE Property
<br>Add a Projectile ProjectilePrefab Property
<br>Add a float CooldownTime Property. Set the default value to 3.
<br>Add a bool IsCoolingDown Property. Set the default value to false.
<br>Add a Turret Attack component to your Turret Prefab
<br>Set the AreaOfEngagement in the Inspector
<br>Set the ProjectilePrefab in the Inspector
<br>When you have finished, your Turret Prefab should be similar to the image below:<br><img alt="setup-turret-attack.png" src="https://towerdefense.captaincoder.org/lib/media/setup-turret-attack.png"><br><br>To help you test if your TurretAttack implementation is working in isolation, create a test scene. In this test, you will test that your TurretAttack:<br>
<br>Fires at an Enemy that is within the Area of Engagement
<br>Changes targets when an Enemy in the Area of Engagement is destroyed
<br>Does not fire at an Enemy that is not within the Area of Engagement
<br><br>
<br>Create a new Scene in your Test Scenes folder. Name it "TurretAttack Test Scene"
<br>Add a Turret Prefab to the Scene
<br>Add 2 Enemy Prefabs within the Area of Engagement
<br>Add a 3rd Enemy Prefab that is outside the Area of Engagement
<br>Set all of the Enemies to have at least 2 base health.
<br>When you're done, your TurretAttack Test Scene should look similar to the image below:<br><img alt="turret-attack-test-scene-setup.png" src="https://towerdefense.captaincoder.org/lib/media/turret-attack-test-scene-setup.png"><br><br>Sometimes, it is easier to build a small part of a bigger challenge. Start by implementing a Fire() method that will Instantiate a clone of the ProjectilePrefab, set its transform.position to match the Turret's transform.position, and set its Target to be the first element of AoE.<br>
<br>Declare a private void Fire() method
<br>Instantiate a clone of the ProjectilePrefab
<br>Set the transform.position of the new Projectile to this.transform.position (the position of the Turret)
<br>Set the Projectile.Target to the first target in AoE.Targets 
<br>If necessary, update your Projectile.Target access modifier to public<br>
<img alt="implement-fire.png" src="https://towerdefense.captaincoder.org/lib/media/implement-fire.png">
<br><br>In your Start() method, you can use the Invoke(string, float) method to call the Fire() method after a specified amount of time has passed. Invoke is similar to InvokeRepeating but only calls the method once.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.Invoke.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.Invoke.html" target="_blank">Unity - Scripting API: MonoBehaviour.Invoke</a>
<br>Add a Start() method to your TurretAttack script
<br>In Start(), use Invoke to call Fire after 1 second (use nameof(Fire) rather than "Fire")
<br>Note: Waiting 1 second allows the AreaOfEngagement time to add the Enemies to the Targets list.<br><img alt="call-fire-in-start.png" src="https://towerdefense.captaincoder.org/lib/media/call-fire-in-start.png"><br>If all went well, your Turret should fire exactly one projectile that deals damage to one of the enemies in the Area of Engagement.<br><img alt="test-firing-once.webp" src="https://towerdefense.captaincoder.org/lib/media/test-firing-once.webp"><br><br>Now that you have tested your Fire() method and have confidence that it is working, it is time to implement the full TurretAttack script<br>
<br>Delete the Start() method, you don't need it
<br>Add an Update() method:
<br>If the TurretAttack IsOnCooldown, do nothing (return)
<br>If there AoE.Targets is empty, do nothing (AoE.Targets.Count == 0)
<br>Otherwise, call Fire()
<br>Set IsOnCoolDown to true
<br>Invoke a method that sets IsOnCoolDown to false after CooldownTime seconds
<br>Note: Set the CooldownTime to a smaller number to increase the speed of the test.<br>If all went well, when you enter Play Mode, you should see:<br>
<br>Your Turret will fire a Projectile that hits an Enemy
<br>Wait for the Cooldown
<br>Fire a second Projectile that will destroy the Enemy (assuming it has 2 BaseHealth)
<br>Wait for the Cooldown
<br>An error will appear in the console saying there is a MissingReferenceException. You will solve this bug in the next part of the lesson. 
<br><img alt="challenge-complete-missing-reference-exception.webp" src="https://towerdefense.captaincoder.org/lib/media/challenge-complete-missing-reference-exception.webp"><br><br>A MissingReferenceException occurs when you attempt to reference a Game Object  or Component that has been destroyed and removed from the Scene. In this case, you have destroyed the Enemy but it has not been removed from the Area of Effect's Targets list. If you look closely in the documentation for OnTriggerExit, you will see that it states, "Deactivating or destroying a Collider while it is inside a trigger volume will not register an on exit event."<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerExit.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Collider.OnTriggerExit.html" target="_blank">Unity - Scripting API: Collider.OnTriggerExit(Collider)</a>
<br>This means that you need to manually remove the target from the AreaOfEngagement when it is destroyed.<br><br>There are several ways that you could implement a solution to this bug. One common way is to use a UnityEvent to notify the AreaOfEngagement when the Enemy has been destroyed.<br>A UnityEvent is a way to trigger actions when something happens, like clicking a button or reaching a goal, or in this case, when an enemy dies.<br><br>Create an OnDeath event inside your Health script that is invoked before the object is destroyed. <br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Events.UnityEvent.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Events.UnityEvent.html" target="_blank">Unity - Scripting API: UnityEvent</a>
<br>Open your Health MonoBehaviour Script
<br>Add a UnityEvent&lt;Health&gt; OnDeath Property
<br>Update your ApplyHit method to invoke the OnDeath event before destroying the gameObject
<br><img alt="health-on-death-event.png" src="https://towerdefense.captaincoder.org/lib/media/health-on-death-event.png"><br><br>Now that you have implemented a Health component, you can refactor your AreaOfEngagement to track the Health of the Enemy rather than just the Transform.<br>
<br>Open the AreaOfEngagement Script
<br>Refactor the Targets list to be a List&lt;Health&gt;. You will only fire at enemies that have a Health component.
<br>Refactor OnTriggerEnter and OnTriggerExit to find the Health component on collider
<br>If there is no Health component, return early
<br>Otherwise, add / remove the Health component
<br><img alt="refactor-area-of-engagement.png" src="https://towerdefense.captaincoder.org/lib/media/refactor-area-of-engagement.png"><br>
<br>If necessary, refactor any references to AreaOfEngagement.Targets to use the transform of the component. For example, the TurretAttack script may need to be refactor to:
<br><img alt="refactor-fire.png" src="https://towerdefense.captaincoder.org/lib/media/refactor-fire.png"><br>Before continuing, be sure to test that your Test Scene continues to function the same way it did previously.<br><br>You can use the UnityEvent.AddListener method to "listen" for the OnDeath event to be invoked. In this case, you can use it to call a method that accepts a Health parameter and use it to remove the associated target. To do this, you first need to write a method that will remove a Health component from the Targets list.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Events.UnityEvent.AddListener.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Events.UnityEvent.AddListener.html" target="_blank">Unity - Scripting API: Events.UnityEvent.AddListener</a>
<br>Add a method void RemoveOnDeath(Health targetHealth) to your AreaOfEngagement script
<br>This method simply calls Target.Remove(targetHealth)
<br><img alt="remove-on-death-method.png" src="https://towerdefense.captaincoder.org/lib/media/remove-on-death-method.png"><br>
<br>Update the OnTriggerEnter method such that the RemoveOnDeath method to the is added as a listener to the Health.OnDeath event.
<br><img alt="adding-on-death-listener.png" src="https://towerdefense.captaincoder.org/lib/media/adding-on-death-listener.png"><br>Similar to the UnityEvent.AddListener method, there is also a UnityEvent.RemoveListener method which is used to stop listening to the event. You should do this when the enemy exits the AreaOfEngagement. If you do not and the enemy is destroyed by another turret, it will notify all AreaOfEngagement's it has ever entered.<br>
<br>Update the OnTriggerExit method such that the RemoveOnDeath method stops listening to the Health.OnDeath event using OnDeath.RemoveListener
<br><img alt="ondeath-remove-listener.png" src="https://towerdefense.captaincoder.org/lib/media/ondeath-remove-listener.png"><br>
<br>Finally, run your TurretAttack Test Scene
<br>If all went well, you should see the following:<br>
<br>The Turret fires a projectile that hits the first enemy
<br>A cooldown occurs
<br>The Turret fires a second projectile that hits and destroys the first enemy
<br>A cooldown occurs
<br>The Turret fires a third projectile that hits the second enemy
<br>A cooldown occurs
<br>The Turret fires a fourth projectile that hits the second enemy and destroys it
<br>The test is complete, the Turret does not fire on the 3rd and final enemy as it is not within the AoE
<br><img alt="turret-attack-completed.webp" src="https://towerdefense.captaincoder.org/lib/media/turret-attack-completed.webp"><br><br>With your TurretAttack Test Scene demonstrating the Turret working in isolation, you now have a little confidence that your turrets will work in your game.<br>
<br>Save your TurretAttack Test Scene
<br>Load your level Scene
<br>Test if your Turrets fire on passing enemies!
<br>You may need to adjust the Y position of your Projectile Prefabs model so it appears above the ground (I recommend setting the model's Y position to 0.5)
<br>If necessary, adjust the speed of your projectiles / enemies
<br><img alt="turret-projectile-in-scene.webp" src="https://towerdefense.captaincoder.org/lib/media/turret-projectile-in-scene.webp"><br><br>In this lesson, you used a UnityEvent to notify the AreaOfEffect when your enemy died. In this challenge you will continue to develop your skills using UnityEvents -- TO DO: Add challenge<br><br>With a simple turret, projectile, and enemy implemented, it is now time to add the ability for the player to be able to place turrets onto the map. In the next lesson, you will learn how to utilize Mouse Events to send messages between Game Objects<br><a data-href="13 - Mouse Events" href="https://towerdefense.captaincoder.org/lessons/13-mouse-events.html" class="internal-link" target="_self" rel="noopener nofollow">13 - Mouse Events</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/12-firing-projectiles.html</link><guid isPermaLink="false">Lessons/12 - Firing Projectiles.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:44 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/setup-turret-attack.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/setup-turret-attack.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[13 - Mouse Events]]></title><description><![CDATA[ 
 <br>In this lesson, you will create a MouseEvents MonoBehaviour Script that will allow you to send messages between Game Objects when the mouse cursor interacts with them.<br><br>Start by creating a test scene where you will be able to test your MouseEvents script in isolation. In this scene, you will create a small map 5x5 Grid. On the Grid you will have tiles that you the player can interact with (empty tiles) and tiles that the player cannot interact with (occupied tiles).  <br>
<br>Create a new scene in your Test Scenes folder. I recommend naming it Tile MouseEvents Test Scene
<br>Create a 5x5 Grid of Tiles
<br>Ensure that you have at least 1 empty Tile that can be built upon
<br>Ensure that you have at least 1 blocked Tile that cannot be built upon
<br>Adjust your Main Camera to an Isometric Perspective with your Grid centered
<br>When you're finished you should have a Scene that looks similar to the picture below:<br><img alt="occupied-spaces.png" src="https://towerdefense.captaincoder.org/lib/media/occupied-spaces.png"><br><img alt="isometric-camera-preview.png" src="https://towerdefense.captaincoder.org/lib/media/isometric-camera-preview.png"><br><br>Unity provides several methods that can be used to detect mouse events that occur on Game Objects that have a Trigger Collider. To make use of this, you will write a script that detects Mouse Events that events.<br><br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseEnter.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseEnter.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnMouseEnter()</a>
<br>Create a MonoBehaviour Script called MouseEvents
<br>Add an OnMouseEnter() method to the script
<br>In OnMouseEnter() add a Debug.Log message to help test the script
<br>In Debug.Log, specify this as the context object. This will allow you to click on it in the console to see the attached Game Object.
<br><img alt="mouse-events-on-mouse-enter.png" src="https://towerdefense.captaincoder.org/lib/media/mouse-events-on-mouse-enter.png"><br><br>For a Game Object to receive mouse events, it must have a Trigger Collider attached. When the mouse cursor interacts with that Trigger Collider any MonoBehaviours that are attached to the same Game Object have their appropriate OnMouseXYZ method invoked.<br>
<br>Open your Tile Prefab (this should be your empty tile that can be built upon)
<br>Add the MouseEvents component to the model child component
<br>Add a BoxCollider component to the model child component
<br>Click the Edit Collider icon to verify the shape of the collider matches your model
<br>When you have finished, your Tile Prefab should look similar to the image below:<br><img alt="add-components-to-tile-model.png" src="https://towerdefense.captaincoder.org/lib/media/add-components-to-tile-model.png"><br><br>Test to ensure your MouseEvents are being triggered<br>
<br>Enter Play Mode
<br>Move the mouse over the empty tiles
<br>Click on the log message in the Console to highlight the context in the Hierarchy
<br><img alt="verify-on-mouse-entered.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-on-mouse-entered.webp"><br><br>Next, you will add a UnityEvent so the parent Tile can listen to the mouse events and perform an action.<br>
<br>Add a UnityEvent OnEnter to your MouseEvents script
<br>When the OnMouseEnter method triggers, it should invoke the OnEnter event
<br><img alt="add-on-enter-event.png" src="https://towerdefense.captaincoder.org/lib/media/add-on-enter-event.png"><br><br>One of the biggest benefits of a UnityEvent is the ability to add functionality through the Inspector. To test that your event is firing properly, you can attach an action to it in the Inspector.<br>
<br>Locate the OnEnter event in the Inspector
<br><img alt="find-mouse-events.png" src="https://towerdefense.captaincoder.org/lib/media/find-mouse-events.png"><br>
<br>Click the + icon to add an event listener
<br><img alt="add-on-enter-event.webp" src="https://towerdefense.captaincoder.org/lib/media/add-on-enter-event.webp"><br>
<br>Attach the Tile parent object to the new listener
<br><img alt="attach-tile-to-onenter.webp" src="https://towerdefense.captaincoder.org/lib/media/attach-tile-to-onenter.webp"><br>
<br>Click the Function drop down
<br>Select, Game Object &gt; SetActive(bool)
<br> <img alt="gameobject-set-active.png" src="https://towerdefense.captaincoder.org/lib/media/gameobject-set-active.png"><br>
<br>If necessary, UNCHECK the box below the SetActive function. 
<br><img alt="leave-set-active-false.png" src="https://towerdefense.captaincoder.org/lib/media/leave-set-active-false.png"><br>
<br>Enter Play Mode 
<br>Move the mouse over your tiles
<br>If all went well, the Tiles should deactivate in the Hierarchy. This is because you have registered Tile.SetActive(false) to be invoked when the OnEnter event is triggered.<br><img alt="verify-tiles-deactivate.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-tiles-deactivate.webp"><br><br>
<br>Remove the SetActive event from the event list
<br>Register a listener that changes the Tile's name in the Hierarchy to "MouseEntered"
<br>When you have finished, your scene should act similar to the video below:<br><img alt="change-tile-name-challenge.webp" src="https://towerdefense.captaincoder.org/lib/media/change-tile-name-challenge.webp"><br><br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseExit.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseExit.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnMouseExit()</a>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseUpAsButton.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/MonoBehaviour.OnMouseUpAsButton.html" target="_blank">Unity - Scripting API: MonoBehaviour.OnMouseUpAsButton()</a>
<br>Add an OnExit UnityEvent to your MouseEvents script
<br>Add an OnClick UnityEvent to your MouseEvents script
<br>Use OnMouseExit to Invoke OnExit
<br>Use OnMouseUpAsButton to Invoke OnClick
<br>When exited, the Tile's name in the Hierarchy should be "Exited"
<br>When clicked, the Tile should be set to inactive
<br>When you have finished this challenge, your Test Scene should act similar to the video below:<br><img alt="challenge-enter-exit-click-complete.webp" src="https://towerdefense.captaincoder.org/lib/media/challenge-enter-exit-click-complete.webp"><br><br>With a MouseEvents implemented and ready to use, you can now create a TileCursor that will track which tile the player will interact with when the press the mouse button.<br><a data-href="14 - Tile Cursor" href="https://towerdefense.captaincoder.org/lessons/14-tile-cursor.html" class="internal-link" target="_self" rel="noopener nofollow">14 - Tile Cursor</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/13-mouse-events.html</link><guid isPermaLink="false">Lessons/13 - Mouse Events.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:44 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/occupied-spaces.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/occupied-spaces.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[14 - Tile Cursor]]></title><description><![CDATA[ 
 <br><br>During game play, it will be helpful to your player to be able to tell more easily which tile they are hovering / selecting. To do this, you can use the selection-a or selection-b model which fit nicely around a tile.<br><img alt="tile-cursor-model-examples.png" src="https://towerdefense.captaincoder.org/lib/media/tile-cursor-model-examples.png"><br>
<br>Create a new Prefab to represent your Tile Cursor
<br>Add a model child of the Prefab (I will be using selection-a)
<br>To appear above a tile, set the Y-position to at least 0.201 (tiles are 0.2 units thick)
<br>Add a Tile Cursor prefab to your scene
<br><br>Currently, your Tile Prefab has no components attached to it. When placing a turret, it will be useful to track if the Tile is occupied. To do this, create a TileController MonoBehaviour Script that has a property bool IsOccupied. By default, this will be false.<br>
<br>Create a TileController MonoBehaviour Script
<br>Add a property bool IsOccupied that is false by default
<br>Add a TileController component to your Tile Prefab
<br><img alt="tile-controller-is-occupied-false.png" src="https://towerdefense.captaincoder.org/lib/media/tile-controller-is-occupied-false.png"><br><br>The TileCursor will need to listen to your TileControllers to know if the mouse has entered them. To do this, you will add an event to your TileController that will notify listeners when the mouse has entered.<br>
<br>Add a UnityEvent&lt;TileController&gt; OnCursorEnter
<br><img alt="add-on-cursor-enter.png" src="https://towerdefense.captaincoder.org/lib/media/add-on-cursor-enter.png"><br>
<br>Open your Tile Prefab
<br>If necessary, remove any events you've added to the model's MouseEvents
<br><img alt="clear-events.webp" src="https://towerdefense.captaincoder.org/lib/media/clear-events.webp"><br><br>You may have noticed that you cannot call TileController.OnCursorEnter.Invoke from the MouseEvents.OnEnter listener in the Inspector. This is because you must provide a TileController to call OnCursorEnter.Invoke. However, you can create a method that invokes it that takes no arguments.<br>
<br>
Add a method NotifyCursorEnter()

<br>
In NotifyCursorEnter() invoke OnCursorEnter with this<br>
<img alt="notify-cursor-enter.png" src="https://towerdefense.captaincoder.org/lib/media/notify-cursor-enter.png">

<br>
In the Inspector, add a listener to MouseEvents.OnEnter that will invoke TileController.NotifyCursorEnter()

<br><img alt="tile-cursor-notify-cursor-enter.png" src="https://towerdefense.captaincoder.org/lib/media/tile-cursor-notify-cursor-enter.png"><br><br>With your TileController propagating itself to listeners, you can now register your TileCursor on them and update its position to match.<br>
<br>Create a TileCursor MonoBehaviour Script
<br>Add an HandleTileEntered(TileController) method
<br>In HandleTileEntered, set the transform.position of the cursor to match the transform.position of the TileController.
<br><img alt="tile-cursor.png" src="https://towerdefense.captaincoder.org/lib/media/tile-cursor.png"><br>
<br>In your Scene Hierarchy, select one of your Tiles
<br>In the Inspector, locate the Tile Controller component
<br>Add a listener to the OnCursorEnter event
<br>Add your Tile Cursor to the event
<br><img alt="add-tilecursor-to-tile.webp" src="https://towerdefense.captaincoder.org/lib/media/add-tilecursor-to-tile.webp"><br>By using a Unity Event that sends a TileController, you gain access to Dynamic TileController functions in the Function Drop Down. When you use this function, it will send the TileController as an argument to the specified method.<br>
<br>Select the Function Drop Down
<br>Select TileCursor &gt; HandleTileEntered  (the first option under Dynamic TileController)
<br><img alt="dynamic-tile-controller.png" src="https://towerdefense.captaincoder.org/lib/media/dynamic-tile-controller.png"><br>
<br>Enter Play Mode and test that your Tile Cursor moves when the mouse moves over the Tile that you registered the event on.
<br><img alt="verify-cursor-moves.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-cursor-moves.webp"><br><br>To move the Tile Cursor to the most recently entered Tile, you need to register the Tile Cursor on all of your Tile Controllers. Doing this through the Hierarchy and Inspector is challenging and error prone. To make things worse, if you decide to change your map, you have to do it again! Remember, as a programmer, any time you find yourself performing a repetitive task, you should ask yourself if there exists a way to automate it. If not, you should consider how difficult it would be to create your own automation.<br>Because all of your TileControllers are children of your Grid, you can retrieve them all using the GetComponentInChildren method which retrieves all of the components of a specified type from the specified GameObject and all of its children.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/GameObject.GetComponentsInChildren.html#:~:text=GetComponentsInChildren%20checks%20the%20GameObject%20on%20which%20it%20is,a%20matching%20Component%20of%20the%20type%20T%20specified." rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/GameObject.GetComponentsInChildren.html#:~:text=GetComponentsInChildren%20checks%20the%20GameObject%20on%20which%20it%20is,a%20matching%20Component%20of%20the%20type%20T%20specified." target="_blank">Unity - Scripting API: GameObject.GetComponentsInChildren</a>
<br>Add a GameObject TargetGrid to your TileCursor
<br>Add a ListenToTilesIn(GameObject) method to your TileCursor
<br>In ListenToTileIn, iterate through all of the TileController components and add a listener to call HandleTileEntered
<br><img alt="listen-to-tiles-in.png" src="https://towerdefense.captaincoder.org/lib/media/listen-to-tiles-in.png"><br>
<br>Add a OnEnable() method to TileCursor
<br>In OnEnable, call ListenToTilesIn(TargetGrid)
<br><img alt="on-enable.png" src="https://towerdefense.captaincoder.org/lib/media/on-enable.png"><br>
<br>In the Inspector add your Grid as the TargetGrid for your TileCursor
<br><img alt="register-grid.png" src="https://towerdefense.captaincoder.org/lib/media/register-grid.png"><br>
<br>Enter Play Mode and test that your cursor changes between tiles as it moves between Tiles
<br><img alt="verify-cursor-working.webp" src="https://towerdefense.captaincoder.org/lib/media/verify-cursor-working.webp"><br><br>Recall that it is good practice to remove a listener if the listening object becomes inactive (e.g. OnDisable).<br>
<br>Write a StopListeningToTilesIn(GameObject grid) method
<br>In StopListeningToTiles you should iterate through the specified grid searching for TileControllers and call OnCursorEnter.RemoveListener on each one found.
<br>Add an OnDisable method
<br>In OnDisable, call StopListeningToTiles on the TargetGrid
<br><br>Currently, when the player moves the mouse off of map into a space on the screen that does not contain a tile, the TileCursor remains on the most recently entered Tile. Instead, you should hide the Tile Cursors model.<br>
<br>Add an UnityEvent&lt;TileController&gt; OnCursorExit property to your TileController
<br>Add a NotifyCursorExit() method that invokes OnCursorExit
<br>Add a GameObject Model property to your TileCursor
<br>Add a HandleTileExited(TileController) method to TileCursor
<br>In HandleTileExited, call Model.SetActive(false) to hide the TileCursor's model
<br>In HandleTileEntered, call Model.SetActive(true) to show the TileCursor's model
<br>Connect all necessary events in the Inspector, OnEnable, and OnDisable
<br>When you have successfully completed this challenge, your test scene should look similar to this:<br><img alt="complete-challenge-part-14.webp" src="https://towerdefense.captaincoder.org/lib/media/complete-challenge-part-14.webp"><br><br>With the ability to easily see which tile the player is interacting with, it is time to implement an OnCursorClicked event and an OnTileSelected method that will allow your player to spawn a turret. <a data-href="15 - Turret Spawner" href="https://towerdefense.captaincoder.org/lessons/15-turret-spawner.html" class="internal-link" target="_self" rel="noopener nofollow">15 - Turret Spawner</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/14-tile-cursor.html</link><guid isPermaLink="false">Lessons/14 - Tile Cursor.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:06:43 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/tile-cursor-model-examples.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/tile-cursor-model-examples.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[15 - Turret Spawner]]></title><description><![CDATA[ 
 <br><br>To be able to detect when the player has clicked on a tile, you will add a new event to the TileController that can be used to forward click events. <br>
<br>
Add an UnityEvent&lt;TileController&gt; OnCursorClick property to your TileController

<br>Hint: <a data-href="14 - Tile Cursor#TileController OnCursorEnter Event" href="https://towerdefense.captaincoder.org/lessons/14-tile-cursor.html#TileController_OnCursorEnter_Event" class="internal-link" target="_self" rel="noopener nofollow">14 - Tile Cursor &gt; TileController OnCursorEnter Event</a>


<br>
Verify that the event is now available in the inspector.

<br><img alt="verify-on-cursor-click-inspector.png" src="https://towerdefense.captaincoder.org/lib/media/verify-on-cursor-click-inspector.png"><br>
<br>Add a NotifyCursorClicked() method that invokes OnCursorClick

<br>Hint: <a data-href="14 - Tile Cursor#NotifyCursorEnter" href="https://towerdefense.captaincoder.org/lessons/14-tile-cursor.html#NotifyCursorEnter" class="internal-link" target="_self" rel="noopener nofollow">14 - Tile Cursor &gt; NotifyCursorEnter</a>


<br>In your Tile Prefab update the model's OnClick event to invoke the NotifyCursorClicked method.
<br><img alt="on-click-notify-cursor-clicked.png" src="https://towerdefense.captaincoder.org/lib/media/on-click-notify-cursor-clicked.png"><br><br>Now that you have an event that sends an event when a tile is clicked, you add in a Turret Spawner that will listen for clicks. If the tile is not occupied, it will spawn a turret at that location.<br>
<br>Create a new MonoBehaviour called TurretSpawner
<br>Add a GameObject TurretPrefab property to your TurretSpawner
<br>Add the [field: SerializeField] attribute to the TurretPrefab property
<br><img alt="15 - Spawning a Turret.png" src="https://towerdefense.captaincoder.org/lib/media/15-spawning-a-turret.png"><br>
<br>Create a new GameObject in the Turret Spawn Test Scene, this will be your TurretSpawner
<br>Add the TurretSpawner component
<br>In the Inspector set the TurretPrefab to use the prefab you created for your Turret
<br><br><br>
<br>Add a SpawnTurret(TileController) method to your TurretSpawner
<br>In SpawnTurret, check to see if the specified TileController IsOccupied . 
<br>If it is, do nothing.  (return)
<br>If it is not occupied, Instantiate a TurretPrefab and set the position to match the position of the TileController
<br><img alt="SpawnTurretMethod.png" src="https://towerdefense.captaincoder.org/lib/media/spawnturretmethod.png"><br><br>Before writing a handler to register your TurretSpanwer on all tiles, it is helpful to test if the SpawnTurret method is working against a single tile.<br>
<br>In the Hierarchy select a Tile
<br>In the Inspector add listener to the OnCursorClick event<br>

<br>Add your TurretSpanwer as the listening object
<br>Select the TurretSpawner.SpawnTurret method as the method to invoke<br>

<br>Take note of the tile that you updated.
<br>Enter Play Mode and click on that tile, if all went well, a turret was spawned into the scene<br>

<br><br>You likely noticed that after you placed your turret, the cursor stops registering on tiles that are near your turret. This is because the collider the turret is using to detect enemies is blocking the tile. To prevent this, you can create Collision Layers for your objects and specify which layers mouse events detect.<br><br>
<br>
From the top menu select Edit &gt; Project Settings

<br>
On the left side, select the Tags and Layers tab<br>
<img alt="Assets/m15-Spawning a Turret/tags-and-layers.png" src="https://towerdefense.captaincoder.org/lib/media/tags-and-layers.png">

<br>
If necessary, open the Layers drop down. (Ensure you are not in Sorting Layers / Rendering Layers)

<br>
Add a Tiles layer<br>
<img alt="add-tile-layer.png" src="https://towerdefense.captaincoder.org/lib/media/add-tile-layer.png">

<br><br>
<br>In the Project explorer tab, navigate to your Prefabs &gt; Tiles folder
<br>Select all of your Tile prefabs
<br>In the Inspector, change the Layer to Tile
<br>When prompted, select change children
<br>This will apply the Tile layer to all of your tile objects and their models<br>

<br><br>If you switch to the Game tab or enter Play Mode you will no longer see your tiles. This is because the Camera does not render them.<br>
<br>Update the camera's Culling Mask to see the Tile layer
<br><br>By default, the Camera will detect all collision layers. This means that your mouse is being blocked by your turrets area of engagement collider. To fix this, you must change which layers the camera allows the mouse to interact with. This is called the Camera's Event Layer. <br>Unfortunately, there is no way to set this in the Inspector. But, it is possible to modify the Camera.eventMask field using a script.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Camera-eventMask.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Camera-eventMask.html" target="_blank">Unity - Scripting API: Camera.eventMask</a>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/LayerMask.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/ScriptReference/LayerMask.html" target="_blank">Unity - Scripting API: LayerMask</a>
<br>Create a new MonoBehaviour called CameraEventMaskController
<br>Add a LayerMask EventMask property<br>
<img alt="eventmask.png" src="https://towerdefense.captaincoder.org/lib/media/eventmask.png">
<br>In the Hierarchy select your Main Camera
<br>In the Inspector, add a CameraEventMaskController
<br>Set the EventMask to Tile<br>

<br>Add an Awake() method to your CameraEventMaskController
<br>In Awake()
<br>Use GetComponent&lt;Camera&gt;() to find the Camera component
<br>Set the camera's eventMask to the EventMask property<br>
<img alt="15 - Spawning a Turret 1.png" src="https://towerdefense.captaincoder.org/lib/media/15-spawning-a-turret-1.png">
<br>Enter Play mode and test that you can still see the selected tile after placing a turret<br>

<br><br>Now that you have verified that you can spawn a single turret, you are ready to listen to all of the tiles in a grid.<br>
<br>Remove the listener you added to the tile in your scene
<br>Review how you listen to all tiles in TileCursor<br>
Update TurretSpawner such that
<br>OnEnable, listen to all of the tiles in your test scene's grid
<br>OnDisable, stop listening to all of the tiles in your test scene's grid
<br>When you have finished, you should be able to click on any tile in the scene to spawn a turret:<br>
<br><br>Currently, if you click the same tile multiple times, it will spawn multiple turrets. This is because you never set tilecontroller.IsOccupied to true after spawning a turret in SpawnTurret Can you fix this bug?<br>
<br>Update SpawnTurret to set tileController.IsOccupied to true
<br>Hint: You will also need to modify TileController
<br><br>Now that you are able to spawn turrets on a tile, it is time to add a TileCursor and a TurretSpawner to your map. In the next lesson, you will learn how to add a button that enables the player to build a turret in your level.<br><a data-href="16 - Placing Turrets" href="https://towerdefense.captaincoder.org/lessons/16-placing-turrets.html" class="internal-link" target="_self" rel="noopener nofollow">16 - Placing Turrets</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/15-turret-spawner.html</link><guid isPermaLink="false">Lessons/15 - Turret Spawner.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:06:38 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/verify-on-cursor-click-inspector.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/verify-on-cursor-click-inspector.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[16 - Placing Turrets]]></title><description><![CDATA[ 
 <br><br>To be able to use your TurretSpanwer in any scene, you can turn it into a prefab.<br>
<br>Turn your TurretSpawner into a prefab
<br><br>
<br>Open your level scene<br>
You'll notice that in your level scene, your camera no longer renders your Tiles. This is because you moved your Tile prefabs to the Tile layer. 
<br>Update your main camera's culling mask to show the Tile layer
<br><br>
<br>Add a TileCursor and a TurretSpawner to your scene
<br>In the Inspector, set your TileCursor and TurretSpawner to listen to the tiles in your level's grid<br>

<br>Enter Play Mode and test that you can now place turrets<br>

<br><br>You may have noticed that you are unable to place turrets within another turrets Area of Engagement. Recall that you fixed this for your Test Scene in <a data-href="15 - Turret Spawner#Camera Event Layer" href="https://towerdefense.captaincoder.org/lessons/15-turret-spawner.html#Camera_Event_Layer" class="internal-link" target="_self" rel="noopener nofollow">15 - Turret Spawner &gt; Camera Event Layer</a>.<br>
<br>Update your camera to only interact with the Tile layer
<br><br>As you continue to add new scenes to your game, you may need to adjust the camera again. Ideally, the camera will work the same in every scene. To help create this consistency, you can create a GameCamera prefab that can be reused in your test scenes. Additionally, it can be useful to have the camera nested in a parent object just in case you need to add sibling game objects.<br>
<br>In the Hierarchy, create a parent object for your Main Camera and name it GameCamera
<br>Turn the GameCamera object into a Prefab
<br><br><br>Now that you have a way to spawn turrets into your scene during Play Mode, you can remove the starting turrets from the scene.<br>
<br>Remove any turrets that you placed directly in your scene
<br><br>Next, you will add a button to your scene that enables the TileCursor and TurretSpawner GameObjects when clicked.<br><br>Verify that disabilng TileCursor and TurretSpawner disables the ability to place turrets.<br>
<br>Select both TileCursor and TurretSpawner in the Hierarchy
<br>In the Inspector, disable both game objects
<br>Enter Play Mode and verify that you can no longer place turrets
<br>While in Play Mode enable both TileCursor and TurretSpawner
<br>Verify that you can place turrets while they're enabled<br>

<br><br>
<br>In the Hierarchy, click the + icon
<br>Select UI &gt; Button - TextMeshPro<br>
<img alt="Add button textmeshpro.png" src="https://towerdefense.captaincoder.org/lib/media/add-button-textmeshpro.png">
<br>The first time you add a TextMeshPro object to a Unity Project, you will be prompted to import the Text Mesh Pro library.<br>
<br>Import Text Mesh Pro Essentials<br>
<img alt="import-tmp-essentials.png" src="https://towerdefense.captaincoder.org/lib/media/import-tmp-essentials.png">
<br>You do not need to Import the Examples &amp; Extras
<br>After the library has been imported, you should see 3 new Game Objects in your Hierarchy<br>
<img alt="after-importing-button.png" src="https://towerdefense.captaincoder.org/lib/media/after-importing-button.png"><br><br>You may be wondering what are the Canvas and EventSystem objects that were added to your scene. The Canvas in Unity is a component that acts as the root for all UI elements, determining how they are rendered and positioned in the game world or screen space. The EventSystem is responsible for processing and managing user input, such as mouse clicks, touches, and controller interactions, ensuring that UI elements respond correctly. Together, the Canvas and EventSystem enable interactive user interfaces by handling rendering and input events within Unity’s UI system.<br><br>If you are in the Scene tab, you probably do not see the Button you added. This is because the button is added to the Canvas which, by default, exists as a screen overlay.<br>
<br>Open the Game view tab
<br>Verify that there is a button in the center of the screen<br>
<img alt="verify-button-in-center.png" src="https://towerdefense.captaincoder.org/lib/media/verify-button-in-center.png"><br>
In the Scene view, you can switch to 2D mode to more easily view the button on the canvas.
<br>Open the Scene view tab
<br>Select the 2D mode in the top right of the Scene view
<br>Double click on the Canvas in the Hierarchy to focus the camera on the canvas<br>

<br><br>
<br>Select the Move tool
<br>Move the Button to the bottom left corner of the canvas<br>

<br><br>Unfortunately, setting the position of the button in this way will only work if your player is using the exact same resolution as you. Unity provides tools for testing different resolutions so you can determine how your game will work in different screen modes.<br>
<br>Open the Game view tab
<br>Toggle between different resolutions
<br>Observe the button moving to different screen positions<br>

<br><br>This is happening because your button was positioned relative to the center of the screen. Thus, if the user is using a smaller resolution, the button will appear closer to the center of the screen. To help with this, Unity provides a way to specify a Pivot point.<br>
<br>Select the your Button from the Hierarchy
<br>In the Inspector, find the Rect Transform component
<br>Click the Pivot icon to open the "quick" pivot and anchor settings
<br>Click the Bottom Left Corner pivot icon<br>
<br>
This sets the objects position to be relative to the bottom left corner of the users screen regardless of their resolution.
<br>If necessary, adjust the buttons position so it is near the bottom left corner
<br>Enter Play Mode
<br>Change Resolutions
<br>Observe that the button doesn't change position
<br>The size of the button may appear to change -- however, this is because the zoom scale is changing.<br>

<br><br>By default, Unity's UI button object comes with an OnClick Listener that can be used in the Inspector to invoke a method on an object.<br>
<br>
Select your button in the Hierarchy

<br>
In the Inspector find the Button component

<br>
Within the Button component, locate the On Click event

<br>
Add a Listener by clicking the + icon<br>


<br>
Add the TileCursor to the listener

<br>
Invoke the GameObject.SetActive method and set it to true (enable checkbox)<br>


<br>
Enter Play Mode

<br>
Verify that the cursor does not display if you move on a tile

<br>
Click the Button

<br>
Verify that the cursor does display if you move on a tile<br>


<br><br>
<br>Update the button such that it will enable both the TileCursor and TurretSpawner when the button is clicked
<br>When you're finished, your game should operate similar to the video below<br>
<br><br>
<br>Expand the Button in the Hierarchy
<br>Select the Text (TMP) child
<br>In the Inspector find the Text component
<br>Update the Text component to display "Build"<br>

<br><br>Now that you have a basic understanding about adding a button to your scene that can invoke methods on your other GameObjects, it is time to add in resources that will determine if the player is able to place a turret on the map.<br><a data-href="17 - Adding Gold" href="https://towerdefense.captaincoder.org/lessons/17-adding-gold.html" class="internal-link" target="_self" rel="noopener nofollow">17 - Adding Gold</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/16-placing-turrets.html</link><guid isPermaLink="false">Lessons/16 - Placing Turrets.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 21:07:40 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/add-button-textmeshpro.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/add-button-textmeshpro.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[PlayerController Class]]></title><description><![CDATA[ 
 <br><br>Currently, when your player clicks the Build button, it enables the TurretSpawner which, in turn allows them to click on tiles to spawn multiple turrets. Next, you will create a PlayerController class that will track a Gold resource for the player that limits their ability to place turrets. When the player builds a turret, it will reduce the player's Gold.<br><br>
<br>Create a new MonoBehaviour named PlayerController
<br>Add an int Gold Property
<br>In your scene, add a new GameObject that has a PlayerController component . 
<br>Set the Gold property in the Inspector to 200
<br>When you have finished, your scene should look similar to the image below:<br><img alt="add-player-controller-gold-200.png" src="https://towerdefense.captaincoder.org/lib/media/add-player-controller-gold-200.png"><br><br>To help the player know how much gold they have, add a Text Label to your Canvas<br>
<br>In the Hierarchy, right click on your Canvas
<br>Select Create &gt; UI &gt; Text - TextMeshPro
<br><br><br>Recall how you anchored your Build button to the bottom left corner of the screen (see: <a data-href="16 - Placing Turrets#UI Pivots" href="https://towerdefense.captaincoder.org/lessons/16-placing-turrets.html#UI_Pivots" class="internal-link" target="_self" rel="noopener nofollow">16 - Placing Turrets &gt; UI Pivots</a>). You can do the same thing with any UI component. Additionally, if you hold Shift and Alt while selecting a pivot, it will move your UI component to that position.<br>
<br>Select your Gold Label
<br>In the Inspector click the Pivot icon on the Rect Transform
<br>Press and hold Shift + Alt
<br>Click the Top Left Corner pivot icon
<br>Observe that the text moves to the top left corner, additionally the anchor and pivot values update.<br>

<br>Adjust the Pos X and Pos Y values slightly to keep the text from touching the edge of the screen.<br>

<br>Update the default text to display "Gold: 0"<br>

<br><br>Now that you have a Gold Label, you can make it reference your PlayerController and update the text component to display the current amount of Gold the player has available.<br><br>
<br>Create a new MonoBehaviour named GoldLabelController
<br>Add a PlayerController Controller property
<br>Add a TextMeshProGUI Label property
<br>Add an Update() method:
<br>Set Label.text to display Controller.Gold
<br><img alt="GoldLabelController.png" src="https://towerdefense.captaincoder.org/lib/media/goldlabelcontroller.png"><br><br>
<br>Add a GoldLabelController component to your GoldLabel
<br>Connect the PlayerController and Label properties in the Inspector

<br>Note: Label should reference the Gold Label (self)


<br>Enter Play Mode to confirm the label updates
<br>Adjust the PlayerController's Gold property to observe the change<br>

<br><br><br>To be able to check if we can spawn a turret, the TurretSpawner must check if the player has enough gold.<br>
<br>Add a PlayerController Controller property to the TurretSpawner MonoBehaviour
<br>In the Inspector connect the PlayerController to the TurretSpawner<br>
When you have finished, your inspector should look similar to the image below:
<br><img alt="reference-player-controller.png" src="https://towerdefense.captaincoder.org/lib/media/reference-player-controller.png"><br><br>
<br>Add a bool CanSpawn(TileController tileController) method to the TurretSpawner MonoBehaviour:
<br>The method returns false if the tileController is occupied 
<br>The method returns false if the Controller does not have at least 50 gold
<br>Otherwise, the method returns true
<br>Update the SpawnTurret method to use CanSpawn to determine if a turret can be spawned
<br>Update the SpawnTurret method to reduce Controller.Gold by 50
<br>Enter Play Mode to test your spawner
<br>You should only be able to place 4 turrets
<br>After placing each turret, you should observe that the gold decreases
<br>When you have finished, you should see something similar to the video below:<br>
<br><br>Currently, your player does not receive much information about what the result of clicking on a tile will be. This can be both confusing and frustrating. How were they supposed to know the turret was going to cost 50 gold! Maybe they didn't see that they were out of gold and don't understand why clicking is not placing a turret. To help create a better user experience, you will add in a text label that will display information to the player.<br><br>
<br>Add a Text - TextMeshPro to your Canvas (Info Label)
<br>Change the default text to "Player Interaction Info Label"
<br>Position and resize the text on the screen to your liking
<br>Note: In the preview project, the information label will be on the bottom center of the screen<br>
When you have finished, your game view should look like the video below:<br>
<img alt="player-interaction-info-label.png" src="https://towerdefense.captaincoder.org/lib/media/player-interaction-info-label.png">
<br><br>
<br>Add a TextMeshProGUI InfoLabel to your PlayerController MonoBehaviour
<br>Add a Start() method to PlayerController
<br>Set InfoLabel.text to display "Click Build to Place a Turret"
<br>Connect the InfoLabel in the Inspector
<br>Enter Play Mode to test that the InfoLabel updates when the game starts<br>
When you have finished, your scene should look similar to the video below:<br>

<br><br>By default, Text labels intercept click events of a mouse. This can be useful if you want to detect if a mouse is hovering over a label. However, this can be problematic if your label is blocking a button or your game scene. This can be disabled in the Extra Settings section of the TextMeshPro - Text(UI) component. <br>
<br>Disable Raycast Target in your Info Label / Gold Label to prevent them from blocking your buttons / turret placements.<br>

<br><br>
<br>Add a ShowInfo(TileController) method to TurretSpawner:
<br>If the tileController.IsOccupied display "Cannot build here"
<br>If the Controller.Gold &lt; 50 display "&lt;color=red&gt;Not enough gold"
<br>else display "50 Gold - Place Turret"
<br><img alt="show-info-method.png" src="https://towerdefense.captaincoder.org/lib/media/show-info-method.png"><br><br>
<br>Update your TurretSpanwer MonoBehaviour in the following ways
<br>When enabled, display "Select a Tile"
<br>Add a listener such that ShowInfo is called when the cursor enters a tile
<br>Add a listener such that "Select a Tile" is displayed when the cursor exits a tile
<br>After a turret is placed, disable the TurretSpawner
<br>Be sure to remove any listeners when TurretSpawner is disabled
<br>When disabled, display "Click Build to Place a Turret"
<br>Enter Play Mode to test your changes
<br>When you have finished, your game should behave similar to the scene below:<br><br><br>Now that your player can use gold to build turrets, it is now time to create a way for the player to gain gold. In the next lesson, you will create a new building that continuously generates gold for the player.<br><a data-href="18 - Generating Gold" href="https://towerdefense.captaincoder.org/lessons/18-generating-gold.html" class="internal-link" target="_self" rel="noopener nofollow">18 - Generating Gold</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/17-adding-gold.html</link><guid isPermaLink="false">Lessons/17 - Adding Gold.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 23:48:07 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/add-player-controller-gold-200.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/add-player-controller-gold-200.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[18 - Generating Gold]]></title><description><![CDATA[ 
 <br>Currently, in your game, the player starts with a limited amount of gold that they can spend to build Turrets. Unfortunately, the player has no way to generate additional resources. Next, you will create a new type of building that the player can place that will generate Gold for them over time.<br><br>
<br>Create a new GameObject to represent your GoldGenerator building
<br>Add a model (or multiple models) as children objects to the GoldGenerator
<br>
<br>Feel free to use any model you would like! In this document, I will combine two of the Kenney models together.
<br>
<br>If necessary, adjust the models positions within the parent object to fit nicely on a tile
<br>Convert your object into a Prefab
<br>When you are finished, you should have a GoldGenerator Prefab that you can place on any tile in your game scene:<br><br><br>
<br>Create a new MonoBehaviour called GoldGenerator
<br>Add a float Delay property which represents how often it will generate gold
<br>Add an int Gold property which represents how much gold is generated
<br>Add a GoldGenertor component to your GoldGenerator prefab
<br>In the Inspector set Delay to 2 and Gold to 1
<br>When you've finished your prefab should look similar to the image below:<br><img alt="gold-generator.png" src="https://towerdefense.captaincoder.org/lib/media/gold-generator.png"><br><br>To be able to update the player's gold, the GoldGenerator requires a reference to the PlayerController. You will not be able to set this in the Prefab because the PlayerController does not exist here. One way you can acquire a reference to it without the need to set it in the Inspector is to assume that the PlayerController will be a parent of the GoldGenerator. Then, use GetComponentInParent to set the reference.<br>
<br>Add a PlayerController Controller property to your GoldGenerator
<br>Add an Awake() method
<br>In Awake() use GetComponentInParent&lt;PlayerController&gt;() to assign Controller
<br><img alt="cache-player-controller.png" src="https://towerdefense.captaincoder.org/lib/media/cache-player-controller.png"><br><br>
<br>Add a GoldGenerator to your game scene as a child of the PlayerController
<br>Enter Play Mode
<br>Observe that the PlayerController property is set when the game starts
<br><br><br>
<br>Review how you used InvokeRepeating and CancelInvoke to spawn enemies into your game
<br>Add a GenerateGold() method to your GoldGenerator MonoBehaviour
<br>Use InvokeRepeating to cause GenerateGold() to execute every Delay seconds
<br>Don't forget to use CancelInvoke when the GoldGenerator is disabled
<br>Enter Play Mode to test that your Gold is now increasing
<br>When you're finished, your game should look similar to the video below:<br>
<br><br>The TurretSpawner you created previously does almost everything you need to be able to spawn GoldGenerators into your game.<br>
<br>Select your TurretSpawner in the Hierarchy
<br>In the Inspector change the Turret Prefab property to your GoldGenerator prefab
<br>Enter Play Mode and place a GoldGenerator
<br>Observe the error that occurs
<br><br><br>If you investigate the error, you will find that the newly spawned GoldGenerator does not have a PlayerController. This is because the object is being instantiated without a parent.<br>The Instatiate method has several overloaded versions that allow you to specify additional information about how to create the specified GameObject. One version allows you to specify the parent object: Instantiate(GameObject, Transform)<br>
<br>Update TurretSpawner.SpawnTurret to set the parent of the object of the turret to be the PlayerController's transform when it is spawned. (Controller.transform)<br>
<img alt="set-parent-object.png" src="https://towerdefense.captaincoder.org/lib/media/set-parent-object.png">
<br>Enter Play Mode to test that you are able to spawn your Gold Generators<br>
When you are finished, your game should look and act similar to the video below:  
<br><br><br>Currently, you only have a single Build button that enables the TurretSpawner game which knows references your GoldGenerator prefab. Next, you will update the Build button to set the prefab.<br>
<br>Update your TurretSpawner.TurretPrefab field to have a public setter<br>
<img alt="ensure-set-public.png" src="https://towerdefense.captaincoder.org/lib/media/ensure-set-public.png">
<br>Select the Button in the Hierarchy
<br>In the Inspector add a listener to the On Click event
<br>Set the TurretSpawner as the listening object
<br>Select  the TurretSpanwer.TurretPrefab property
<br>Set the GameObject to be your Turret prefab
<br><br>
<br>Enter Play Mode and test that your TurretSpawner field is changed when the button is clicked. This results in the player being able to spawn Turrets (rather than GoldGenerators)
<br><br><br>Currently, your player is only capable of building Turrets when they click the Build button. Can you add another button that allows them to create generators?<br>
<br>Add a button to your Canvas
<br>The button should be labeled "Generator"
<br>Use Pivots and Anchors to set the buttons position relative to the screen
<br>When the button is clicked, the player should be able to place generators
<br>Enter Play Mode to test that both of your buttons works
<br>When you have finished, your game should look and act similar to the video below:<br>
<br><br>Although it is now possible to spawn different types of buildings/turrets, you are not able to easily change the cost (the gold cost of 50 is hard coded). Additionally, the user hints could be more descriptive based on the type of building you want to place. In the next lesson, you will create a ScriptableObject  building type that will allow you to quickly and easily create new building types and easily add them to your player's UI.<br><a data-href="19 - BuildingData" href="https://towerdefense.captaincoder.org/lessons/19-buildingdata.html" class="internal-link" target="_self" rel="noopener nofollow">19 - BuildingData</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/18-generating-gold.html</link><guid isPermaLink="false">Lessons/18 - Generating Gold.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 06 Mar 2025 19:09:35 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/gold-generator.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/gold-generator.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Challenge: Design a New Building]]></title><description><![CDATA[ 
 <br><br>So far, you have created two buildings: one that fires projectiles when enemies are within its Area of Engagement and another that continuously generates Gold. In this challenge, you should define a new structure of your own choosing. Below are a few ideas to choose from.<br>
<br>A turret that has a larger range but longer cooldown
<br>A turret that fires at all enemies within its Area of Engagement
<br>A building that doubles the amount of gold of all GoldGenerates adjacent to it
<br>A building that slows down enemies that are within its AreaOfEngagment
<br>A building of your own design
<br><br>
<br>Add a third button that can be used to place your new building
<br>Enter Play Mode to test that your building works as expected<br>
If all went well, you should have a scene that looks similar to the one below. For the demo, I've created a Cannon turret that has a wider range than the original Turret but has a longer cooldown.
<br><br><br>Currently, the cost of each building is set to 50 directly in the code. To give your player more interesting choices, you can make each building have a different cost. To do this, you will create a ScriptableObject.<br><br>A ScriptableObject can be used to define and edit data in the Unity Inspector that does not exist on a Game Object.<br>
<br>Read the Friendly Manual: <a data-tooltip-position="top" aria-label="https://docs.unity3d.com/6000.0/Documentation/Manual/class-ScriptableObject.html" rel="noopener nofollow" class="external-link" href="https://docs.unity3d.com/6000.0/Documentation/Manual/class-ScriptableObject.html" target="_blank">Unity - Manual: ScriptableObject</a>
<br>In your Scripts folder right click
<br>Select Create &gt; Scripting &gt; ScriptableObject Script
<br>Name the ScriptableObject: "BuildingData"
<br><img alt="scriptable-object.png" src="https://towerdefense.captaincoder.org/lib/media/scriptable-object.png"><br>
<br>Open the BuildingData script
<br>Verify that the class is named BuildingData
<br>Verify that the class extends ScriptableObject
<br>Verify the menuName is set to Scriptable Objects/BuildingData<br>
<img alt="verify-buildingdata.png" src="https://towerdefense.captaincoder.org/lib/media/verify-buildingdata.png">
<br><br>
<br>Create a new folder in Assets called Data
<br>Open the Data folder
<br>Right click and select Create &gt; Scriptable Objects &gt; BuildingData<br>
Note: The option to select Scriptable Objects &gt; BuildingData was defined by the CreateAssetMenu attribute in your BuildingData script.
<br><br>
<br>Rename the new BuildingData object to TurretData
<br><br><br>
<br>Open the BuildingData script
<br>Add a string Name property
<br>Add an int Cost property<br>
<img alt="fields.png" src="https://towerdefense.captaincoder.org/lib/media/fields.png">
<br><br>Similar to MonoBehaviours you can modify serialized properties in Unity's Inspector.<br>
<br>Select TurretData in your Project window
<br>Set the Cost in the Inspector
<br>Set the Name in the Inspector
<br><br><br>
<br>Add a GameObject BuildingPrefab property to BuildingData
<br>In the Inspector set BuildingPrefab to be your Turret Prefab
<br>When you've finished, your TurretData should look similar to the image below:<br><img alt="turret-prefab-set.png" src="https://towerdefense.captaincoder.org/lib/media/turret-prefab-set.png"><br><br>One of the benefits of a ScriptableObject is the ability to create multiple instances each with their own values.<br>
<br>In your Data folder:
<br>Create a BuildingData for your GoldGenerator
<br>Create a BuildingData for the building you defined at the beginning of this lesson
<br>When you're done, your Data folder and objects should look similar to the video below:<br><br><br>Your TurretSpawner has outgrown its original functionality. Its initial purposed was meant to spawn turrets. However, it is time to replace it with a BuildingSpawner that can be used to place anything defined as a BuildingData.<br><br>
<br>Select the TurretSpawner script
<br>Rename the script to BuildingSpawner
<br><br>
<br>Open the script
<br>Update the class name to match the file name BuildingSpanwer 
<br><img alt="classname-match.png" src="https://towerdefense.captaincoder.org/lib/media/classname-match.png"><br><br>
<br>Select your TurretSpawner from the Hierarchy
<br>Rename it to BuildingSpawner
<br>Verify that it has a Building Spawner component in the Inspector
<br><img alt="verify-name-component.png" src="https://towerdefense.captaincoder.org/lib/media/verify-name-component.png"><br><br>
<br>Open the BuildingSpawner MonoBehaviour
<br>Remove the TurretPrefab property
<br>Add a BuildingData Selected 
<br><img alt="selected-1.png" src="https://towerdefense.captaincoder.org/lib/media/selected-1.png"><br>
<br>Update your Instatiate call to use the Selected.BuildingPrefab property<br>
<img alt="instantiate-update.png" src="https://towerdefense.captaincoder.org/lib/media/instantiate-update.png">
<br>If necessary, update any other references to TurretPrefab to use Selected.BuildingPrefab
<br><br>
<br>In the Hierarchy select Turret Button
<br>Update the OnClick listener to set Selected to TurretData 
<br>Enter Play Mode to test that you can place your Turret
<br><img alt="turret-placement.png" src="https://towerdefense.captaincoder.org/lib/media/turret-placement.png"><br>
<br>Repeat this process for your other 2 buildings
<br>When you have finished, your game should look and act similar to the video below:<br><br><br>
<br>In BuildingSpawner.SpawnTurret: 
<br>Update your code such that Controller.Gold is reduced by Selected.Cost when the building is placed.
<br><img alt="selectedcost.png" src="https://towerdefense.captaincoder.org/lib/media/selectedcost.png"><br>
<br>Enter Play Mode and test that each building used the specified amount
<br><br><br>Currently, BuildingSpawner always displays 50 Gold - Place Turret even when placing non-turret buildings. Additionally, you can build structures that cost too much so long as you have at least 50 gold.<br>
<br>The Info Label should display the cost and name of Selected
<br>The Info Label should display Not Enough Gold if the player does not have enough gold to build the selected building
<br>Update CanSpawn to use Selected.Cost
<br>Update your InfoLabel's starting text to be empty (or another message of your choice)
<br>When you have finished, your game should look and act similar to the video below:<br><br><br>Create 2 more buildings of your choice.<br>
<br>Create a Prefab for each building
<br>Create a ScriptableObject for each building
<br>Add a button for each building
<br><br>In the next lesson, you will add a Tower to your game that takes damage when enemies reach it and, if destroyed, shows a game over screen to the player.<br><a data-href="20 - Tower" href="https://towerdefense.captaincoder.org/lessons/20-tower.html" class="internal-link" target="_self" rel="noopener nofollow">20 - Tower</a>]]></description><link>https://towerdefense.captaincoder.org/lessons/19-buildingdata.html</link><guid isPermaLink="false">Lessons/19 - BuildingData.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Fri, 07 Mar 2025 01:08:34 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/scriptable-object.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/scriptable-object.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Tower]]></title><description><![CDATA[ 
 <br><br>At this point, you have a game scene in which enemies travel along a path and when it reaches the end simply stops. For a player, this is not very exciting and they have little (or no) incentive to try to stop the enemies. In this section, you will add a Tower to your scene that you player will defend from enemies. If enough enemies reach the Tower, the tower will be destroyed.<br><br>
<br>Create a new Prefab object and name it Tower
<br>Within the Prefab add a child component called model
<br>Add one or more 3D models to create the visual representation of your Tower
<br>When you have finished you should have a Prefab that looks similar to the image below:<br><img alt="tower-prefab.png" src="https://towerdefense.captaincoder.org/lib/media/tower-prefab.png"><br><br>Just as you did before with the Projectile Test and the TurretAttack Test, it is easier to test your new Tower component in isolation to know that it works the way you would like before adding it to your main level. <br>In this scene you will create a Tower that can withstand 5 points of damage. You will add two enemies to the scene. One enemy will deal 2 damage. The other will deal 3. After both enemies have damaged the tower, it will be destroyed.<br><br>
<br>Create a new Scene in your Test Scenes folder called "Tower Test Scene"
<br>Delete the default Main Camera from the Scene
<br>Add a GameCamera Prefab to the Scene
<br>Add your Tower Prefab to the Scene
<br>Add a Waypoint centered on your Tower (Tower Waypoint)
<br>Add a second Waypoint that is a short distance from your tower (Second Waypoint)
<br>Set the second Waypoint to go toward the Tower Waypoint
<br>Add an Enemy and set its starting Waypoint to Second Waypoint (First Enemy)
<br>Add a third Waypoint that is a further distance from your tower (Third Waypoint)
<br>Set the third Waypoint to go toward the Tower Waypoint
<br>Add an Enemy and set its starting Waypoint to Third Waypoint (Second Enemy)
<br>If all went well, you should have a scene that looks and acts similar to the one in the video below:<br><br><br>Before you can damage the tower, your Enemy will need to know how much damage it deals.<br>
<br>Create a new MonoBehaviour called EnemyAttack
<br>Add a int Damage property
<br>Add the EnemyAttack component to your Enemy prefab
<br>In the Inspector set First Enemy's Damage property to 2
<br>In the Inspector set Second Enemy's Damage property to 3
<br>When you have finished, your Hierarchy and Inspector should look similar to the video below:<br><br><br>To be able to detect when an Enemy has collided with your Tower, you will need to add a Collider. I recommend using a Capsule Collider but, depending on the shape of your Tower, you may choose to use a different Collider.<br>
<br>Add a child component to your Tower prefab (Tower Collider)
<br>Add a Collider to the new child component
<br>Adjust the size of the collider to fit your model
<br>Set the Collider to be a trigger
<br>When you have finished, your Tower Prefab should look similar to the one in the video below:<br><br><br>Recall how you implemented the AreaOfEngagement MonoBehaviour to detect when an enemy moves in range of your turret in <a data-href="10 - Rotating Turret" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret</a>. <br>
<br>Review <a data-href="10 - Rotating Turret#Add a Rigidbody to Area of Effect" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html#Add_a_Rigidbody_to_Area_of_Effect" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret &gt; Add a Rigidbody to Area of Effect</a>
<br>Review <a data-href="10 - Rotating Turret#AreaOfEngagement MonoBehaviour" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html#AreaOfEngagement_MonoBehaviour" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret &gt; AreaOfEngagement MonoBehaviour</a>
<br>Review <a data-href="10 - Rotating Turret#OnTriggerEnter(Collider)" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html#OnTriggerEnter(Collider)" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret &gt; OnTriggerEnter(Collider)</a>
<br>Create a new MonoBehaviour called TowerCollisionEvents
<br>Add a property UnityEvent&lt;EnemyAttack&gt; OnEnemyHit
<br>Add a void OnTriggerEnter(Collider other)
<br>In OnTriggerEnter, useother.GetComponentInParent&lt;EnemyAttack&gt;() to get the EnemyAttack component.
<br>If the component is null, do nothing (return)
<br>Otherwise, use OnEnemyHit.Invoke to notify listeners of the collision
<br>Additionally, add Debug.Log(other) to your method so you can verify it works
<br>When you have finished, your prefab and test scene should look and act similar to the video below.<br><br><br>
<br>Create a TowerController MonoBehaviour
<br>Add a float BaseHealth property (set the default value to 5)
<br>Add a float Damage property (set the default value to 0)
<br>Add an ApplyHit(EnemyAttack attack) method:
<br>Increase Damage by attack.Damage
<br>Destroy attack.gameObject
<br>If the tower has taken sufficient damage destroy this.gameObject
<br>Add a TowerController component to your Tower Prefab
<br>Register TowerController.ApplyHit as a listener on your TowerCollisionEvents.OnHit event
<br>Enter Play Mode to test your component
<br>If all went well, your Prefab and your Test Scene should look and act similar to the video below:<br><br><br>
<br>Update your TowerController MonoBehaviour
<br>Add a UnityEvent&lt;TowerController&gt; OnDestroyed property
<br>In TowerController.ApplyHit
<br>If the tower has taken sufficient damage to be destroyed, use OnDestroyed.Invoke(this) to notify any listeners that the tower was destroyed
<br>Add a Label to your Test Scene
<br>Update the Label to say Game Over
<br>Position your Label in the center of the screen
<br>Disable the Label so it is not enabled when the scene starts
<br>Register your Label's GameObject.SetActive method on your TowerController.OnDestroyed event to enable the Label
<br>Enter Play Mode to test your event
<br>If all went well, your Hierarchy and Test Scene should look and act similar to the video below:<br><br><br>
<br>Add your Tower Prefab to your main level
<br>Add a Game Over label
<br>Test your level
<br>When you've finished, your level should look and act similar to the video below:<br><br><br>At this point, you have a very simple but playable level that is ready for some polish! In the next lesson, you will add a Level Select screen that will allow your player to select new levels to play.]]></description><link>https://towerdefense.captaincoder.org/lessons/20-tower.html</link><guid isPermaLink="false">Lessons/20 - Tower.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Fri, 07 Mar 2025 01:07:26 GMT</pubDate><enclosure url="https://towerdefense.captaincoder.org/lib/media/tower-prefab.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://towerdefense.captaincoder.org/lib/media/tower-prefab.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Community]]></title><description><![CDATA[ 
 <br>It is never too early to share your work with others to get feedback. One of the biggest mistakes a new developer can make is feeling like your work is not good enough to share. Sharing your work, asking questions, and getting feedback from others will accelerate your learning.<br>Discord: <a rel="noopener nofollow" class="external-link" href="https://discord.gg/captaincoder" target="_blank">https://discord.gg/captaincoder</a><br>
Twitch: <a rel="noopener nofollow" class="external-link" href="https://twitch.tv/thecaptaincoder" target="_blank">https://twitch.tv/thecaptaincoder</a><br>]]></description><link>https://towerdefense.captaincoder.org/community.html</link><guid isPermaLink="false">Community.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Thu, 27 Feb 2025 16:07:45 GMT</pubDate></item><item><title><![CDATA[Unity Workshop - 3D Tower Defense]]></title><description><![CDATA[ 
 <br><br>Take your Unity and C# skills to the next level with this hands-on workshop, designed for aspiring game developers who want to create their own 3D Tower Defense game. This course builds on your foundational knowledge of Unity and programming, focusing on practical application, advanced Unity concepts, and user-centric game design.<br><br>
<br>Completion of at least one introductory Unity course.
<br>Completion of at least one C# course or willingness to complete a programming proficiency project before the second week  of class.
<br><br>
<br>Unity's Script Lifecycle: Gain understanding of Unity’s foundational structure by leveraging key lifecycle methods like Awake, OnEnable, Start, OnMouseEvents, Update, OnDisable, and OnDestroy.
<br>MonoBehaviour, ScriptableObject, and Prefabs: Understand and utilize these core Unity elements to create flexible, reusable, and scalable game architecture. 
<br>Custom Editor Extensions: Learn to create custom Gizmos and Editor drawers to enhance your game development workflow.
<br>User Experience Design: Explore strategies for crafting player-friendly experiences, ensuring your game is both engaging and easy to learn.
<br><br>
<br><a data-href="00 - Install Unity 6" href="https://towerdefense.captaincoder.org/lessons/00-install-unity-6.html" class="internal-link" target="_self" rel="noopener nofollow">00 - Install Unity 6</a> 
<br><a data-href="01 - Creating the Project" href="https://towerdefense.captaincoder.org/lessons/01-creating-the-project.html" class="internal-link" target="_self" rel="noopener nofollow">01 - Creating the Project</a>
<br><a data-href="02 - Creating a Tile Grid" href="https://towerdefense.captaincoder.org/lessons/02-creating-a-tile-grid.html" class="internal-link" target="_self" rel="noopener nofollow">02 - Creating a Tile Grid</a>
<br><a data-href="03 - Creating Additional Tile Prefabs" href="https://towerdefense.captaincoder.org/lessons/03-creating-additional-tile-prefabs.html" class="internal-link" target="_self" rel="noopener nofollow">03 - Creating Additional Tile Prefabs</a>
<br><a data-href="04 - Play Mode Settings" href="https://towerdefense.captaincoder.org/lessons/04-play-mode-settings.html" class="internal-link" target="_self" rel="noopener nofollow">04 - Play Mode Settings</a>
<br><a data-href="05 - Creating an Isometric Camera" href="https://towerdefense.captaincoder.org/lessons/05-creating-an-isometric-camera.html" class="internal-link" target="_self" rel="noopener nofollow">05 - Creating an Isometric Camera</a>
<br><a data-href="06 - Adding an Enemy" href="https://towerdefense.captaincoder.org/lessons/06-adding-an-enemy.html" class="internal-link" target="_self" rel="noopener nofollow">06 - Adding an Enemy</a>
<br><a data-href="07 - Waypoints" href="https://towerdefense.captaincoder.org/lessons/07-waypoints.html" class="internal-link" target="_self" rel="noopener nofollow">07 - Waypoints</a>
<br><a data-href="08 - Waypoint Traveler" href="https://towerdefense.captaincoder.org/lessons/08-waypoint-traveler.html" class="internal-link" target="_self" rel="noopener nofollow">08 - Waypoint Traveler</a>
<br><a data-href="09 - Enemy Spawner" href="https://towerdefense.captaincoder.org/lessons/09-enemy-spawner.html" class="internal-link" target="_self" rel="noopener nofollow">09 - Enemy Spawner</a>
<br><a data-href="10 - Rotating Turret" href="https://towerdefense.captaincoder.org/lessons/10-rotating-turret.html" class="internal-link" target="_self" rel="noopener nofollow">10 - Rotating Turret</a>
<br><a data-href="11 - Projectile" href="https://towerdefense.captaincoder.org/lessons/11-projectile.html" class="internal-link" target="_self" rel="noopener nofollow">11 - Projectile</a>
<br><a data-href="12 - Firing Projectiles" href="https://towerdefense.captaincoder.org/lessons/12-firing-projectiles.html" class="internal-link" target="_self" rel="noopener nofollow">12 - Firing Projectiles</a>
<br><a data-href="13 - Mouse Events" href="https://towerdefense.captaincoder.org/lessons/13-mouse-events.html" class="internal-link" target="_self" rel="noopener nofollow">13 - Mouse Events</a>
<br><a data-href="14 - Tile Cursor" href="https://towerdefense.captaincoder.org/lessons/14-tile-cursor.html" class="internal-link" target="_self" rel="noopener nofollow">14 - Tile Cursor</a>
<br><a data-href="15 - Turret Spawner" href="https://towerdefense.captaincoder.org/lessons/15-turret-spawner.html" class="internal-link" target="_self" rel="noopener nofollow">15 - Turret Spawner</a>
<br><a data-href="16 - Placing Turrets" href="https://towerdefense.captaincoder.org/lessons/16-placing-turrets.html" class="internal-link" target="_self" rel="noopener nofollow">16 - Placing Turrets</a>
<br><a data-href="17 - Adding Gold" href="https://towerdefense.captaincoder.org/lessons/17-adding-gold.html" class="internal-link" target="_self" rel="noopener nofollow">17 - Adding Gold</a>
<br><a data-href="18 - Generating Gold" href="https://towerdefense.captaincoder.org/lessons/18-generating-gold.html" class="internal-link" target="_self" rel="noopener nofollow">18 - Generating Gold</a>
<br><a data-href="19 - BuildingData" href="https://towerdefense.captaincoder.org/lessons/19-buildingdata.html" class="internal-link" target="_self" rel="noopener nofollow">19 - BuildingData</a>
<br><a data-href="20 - Tower" href="https://towerdefense.captaincoder.org/lessons/20-tower.html" class="internal-link" target="_self" rel="noopener nofollow">20 - Tower</a>
<br><br>I would like to give a a huge thank you to everyone who helped test and proof read this project. I could not have done it without you.]]></description><link>https://towerdefense.captaincoder.org/index.html</link><guid isPermaLink="false">Index.md</guid><dc:creator><![CDATA[Captain Coder]]></dc:creator><pubDate>Fri, 07 Mar 2025 01:08:25 GMT</pubDate></item></channel></rss>